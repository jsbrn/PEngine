/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.awt.image.RasterFormatException;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import misc.Animation;
import misc.Block;
import misc.BlockList;
import misc.Dialogue;
import misc.Flow;
import threads.DownloadThread;
import misc.Level;
import threads.PreviewThread;
import misc.Script;
import scene.Scene;
import scene.SceneObject;

/**
 *
 * @author jeremy
 */
public class GUI extends javax.swing.JFrame {
    
    static GUI window;

    /**
     * Creates new form First
     */
    public GUI() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveConfirmDialog = new javax.swing.JDialog();
        questionLabel = new javax.swing.JLabel();
        outcomeLabel = new javax.swing.JLabel();
        yesButton = new javax.swing.JButton();
        noButton = new javax.swing.JButton();
        saveDialogContextLabel = new javax.swing.JLabel();
        testOutputDialog = new javax.swing.JDialog();
        jScrollPane9 = new javax.swing.JScrollPane();
        resultsTextBox = new javax.swing.JTextArea();
        resultsCloseButton = new javax.swing.JButton();
        projectManagerDialog = new javax.swing.JDialog();
        jScrollPane11 = new javax.swing.JScrollPane();
        projectList = new javax.swing.JList();
        deleteProjectButton = new javax.swing.JButton();
        editProjectButton = new javax.swing.JButton();
        projectNameField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        renameProjectButton = new javax.swing.JButton();
        levelManagerDialog = new javax.swing.JDialog();
        jScrollPane12 = new javax.swing.JScrollPane();
        levelList = new javax.swing.JList();
        deleteLevelButton = new javax.swing.JButton();
        editLevelButton = new javax.swing.JButton();
        levelNameField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        renameLevelButton = new javax.swing.JButton();
        objectGalleryDialog = new javax.swing.JDialog();
        jScrollPane13 = new javax.swing.JScrollPane();
        galleryList = new javax.swing.JList();
        editGalleryObjectButton = new javax.swing.JButton();
        newGalleryObjectButton = new javax.swing.JButton();
        deleteGalleryObjectButton = new javax.swing.JButton();
        duplicateGalleryObjectButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        inCurrentLevelLabel = new javax.swing.JLabel();
        inCurrentProjectLabel = new javax.swing.JLabel();
        objectEditorDialog = new javax.swing.JDialog();
        objectEditorTabs = new javax.swing.JTabbedPane();
        objectBasicPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        objectGravityCheckbox = new javax.swing.JCheckBox();
        objectCollidesCheckbox = new javax.swing.JCheckBox();
        jLabel37 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        objectTypeField = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        objectTextureField = new javax.swing.JTextField();
        objectNameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        exportToGalleryButton = new javax.swing.JButton();
        jPanel334 = new javax.swing.JPanel();
        objectPreviewPane = new javax.swing.JLabel();
        objectLogicPanel = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        flowChooser = new javax.swing.JList();
        jLabel49 = new javax.swing.JLabel();
        flowNameField = new javax.swing.JTextField();
        newFlowButton = new javax.swing.JButton();
        duplicateFlowButton = new javax.swing.JButton();
        deleteFlowButton = new javax.swing.JButton();
        runOnSpawnCheckbox = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane26 = new javax.swing.JScrollPane();
        blockChooser = new javax.swing.JTree();
        addBlockButton = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        flowCanvas = new gui.FlowCanvas();
        jLabel19 = new javax.swing.JLabel();
        blockParamChooser = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        blockParamValueField = new javax.swing.JTextField();
        deleteBlockButton = new javax.swing.JButton();
        objectAnimationPanel = new javax.swing.JPanel();
        animationPropertiesPanel = new javax.swing.JPanel();
        animationImageField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        animationFrameChooser = new javax.swing.JList();
        jLabel10 = new javax.swing.JLabel();
        animationFrameDimensionsField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        animationFrameDurationField = new javax.swing.JTextField();
        animationLoopCheckbox = new javax.swing.JCheckBox();
        animationAddFrameButton = new javax.swing.JButton();
        animationDeleteFrameButton = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        chooseAnimationPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        animationChooser = new javax.swing.JList();
        jLabel17 = new javax.swing.JLabel();
        animationNameField = new javax.swing.JTextField();
        newAnimationButton = new javax.swing.JButton();
        duplicateAnimationButton = new javax.swing.JButton();
        deleteAnimationButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        framePreview = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        animationPreviewZoomChooser = new javax.swing.JSpinner();
        toggleAnimationPreviewButton = new javax.swing.JToggleButton();
        objectDialoguePanel = new javax.swing.JPanel();
        chooseDialoguePanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        dialogueChooser = new javax.swing.JList();
        newDialogueButton = new javax.swing.JButton();
        duplicateDialogueButton = new javax.swing.JButton();
        deleteDialogueButton = new javax.swing.JButton();
        dialogueNameField = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        chooseDialogueEventPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        dialogueEventChooser = new javax.swing.JList();
        addPlayerChoiceButton = new javax.swing.JButton();
        addThisSpeakEventButton = new javax.swing.JButton();
        addOtherSpeakEventButton = new javax.swing.JButton();
        deleteDialogueEventButton = new javax.swing.JButton();
        dialogueWaitCheckbox = new javax.swing.JCheckBox();
        dialogueEventMoveUpButton = new javax.swing.JButton();
        dialogueEventMoveDownButton = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        linkToField = new javax.swing.JTextField();
        linkToScriptRadioButton = new javax.swing.JRadioButton();
        linkToDialogueRadioButton = new javax.swing.JRadioButton();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel15 = new javax.swing.JPanel();
        dialogueSayPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        dialogueSpeechTextField = new javax.swing.JTextField();
        dialogueChoicePanel = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        choiceEventValueField = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        dialogueChoiceList = new javax.swing.JList();
        deleteChoiceButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        addNewChoiceField = new javax.swing.JTextField();
        moveChoiceUpButton = new javax.swing.JButton();
        moveChoiceDownButton = new javax.swing.JButton();
        choiceEventResponseToggle = new javax.swing.JRadioButton();
        choiceEventScriptToggle = new javax.swing.JRadioButton();
        choiceEventDialogueToggle = new javax.swing.JRadioButton();
        jLabel26 = new javax.swing.JLabel();
        levelEditorDialog = new javax.swing.JDialog();
        levelEditorTabs = new javax.swing.JTabbedPane();
        levelLightingPanel = new javax.swing.JPanel();
        levelColorPicker = new javax.swing.JColorChooser();
        ambientIntensitySlider = new javax.swing.JSlider();
        jButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        topBackgroundColorLabel = new javax.swing.JTextPane();
        jScrollPane17 = new javax.swing.JScrollPane();
        bottomBackgroundColorLabel = new javax.swing.JTextPane();
        jScrollPane18 = new javax.swing.JScrollPane();
        ambientColorLabel = new javax.swing.JTextPane();
        levelAudioPanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        backgroundMusicField = new javax.swing.JTextField();
        loopBackgroundMusicCheckbox = new javax.swing.JCheckBox();
        autoBackgroundMusicCheckbox = new javax.swing.JCheckBox();
        loopAmbientSoundCheckbox = new javax.swing.JCheckBox();
        autoAmbientSoundCheckbox = new javax.swing.JCheckBox();
        ambientSoundField = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        backgroundMusicVolumeSlider = new javax.swing.JSlider();
        jLabel38 = new javax.swing.JLabel();
        ambientSoundVolumeSlider = new javax.swing.JSlider();
        jLabel39 = new javax.swing.JLabel();
        errorCheckerDialog = new javax.swing.JDialog();
        jLabel43 = new javax.swing.JLabel();
        scanForErrorsButton = new javax.swing.JButton();
        jLabel44 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jScrollPane23 = new javax.swing.JScrollPane();
        errorScanResults = new javax.swing.JTextArea();
        helpDialog = new javax.swing.JDialog();
        jScrollPane24 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel46 = new javax.swing.JLabel();
        jScrollPane25 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        editorPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        objectTypeChooser = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        galleryListSidebar = new javax.swing.JList();
        spawnButton = new javax.swing.JButton();
        selectButton = new javax.swing.JButton();
        moveButton = new javax.swing.JButton();
        cameraButton = new javax.swing.JButton();
        resizeButton = new javax.swing.JButton();
        bringForwardButton = new javax.swing.JButton();
        sendBackwardsButton = new javax.swing.JButton();
        objectCloneButton = new javax.swing.JButton();
        spawnGeneralButton = new javax.swing.JButton();
        viewAdvancedObjectOptionsButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        objectGalleryButton = new javax.swing.JButton();
        objectNameLabel = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        levelSpawnField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        camPosField = new javax.swing.JTextField();
        levelZoomSlider = new javax.swing.JSlider();
        jLabel45 = new javax.swing.JLabel();
        sceneCanvas = new gui.SceneCanvas();
        menuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        levelMenu = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        runProjectButton = new javax.swing.JMenuItem();
        runProjectAtLevelButton = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        statusIndicator = new javax.swing.JMenu();
        downloadUpdateButton = new javax.swing.JMenu();

        saveConfirmDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        saveConfirmDialog.setBounds(new java.awt.Rectangle(0, 0, 285, 114));
        saveConfirmDialog.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        saveConfirmDialog.setResizable(false);
        saveConfirmDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                genericDialogWindowClosing(evt);
            }
        });

        questionLabel.setText("Would you like to save first?");

        outcomeLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        outcomeLabel.setText("Clicking 'no' will lose any unsaved progress!");

        yesButton.setText("Yes");
        yesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesButtonActionPerformed(evt);
            }
        });

        noButton.setText("No");
        noButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noButtonActionPerformed(evt);
            }
        });

        saveDialogContextLabel.setText("           ");
        saveDialogContextLabel.setToolTipText("");

        javax.swing.GroupLayout saveConfirmDialogLayout = new javax.swing.GroupLayout(saveConfirmDialog.getContentPane());
        saveConfirmDialog.getContentPane().setLayout(saveConfirmDialogLayout);
        saveConfirmDialogLayout.setHorizontalGroup(
            saveConfirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveConfirmDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(saveConfirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveDialogContextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(saveConfirmDialogLayout.createSequentialGroup()
                        .addGroup(saveConfirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(questionLabel)
                            .addComponent(outcomeLabel)
                            .addGroup(saveConfirmDialogLayout.createSequentialGroup()
                                .addComponent(yesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(noButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 20, Short.MAX_VALUE)))
                .addContainerGap())
        );
        saveConfirmDialogLayout.setVerticalGroup(
            saveConfirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveConfirmDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionLabel)
                .addGap(4, 4, 4)
                .addComponent(outcomeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(saveConfirmDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yesButton)
                    .addComponent(noButton))
                .addGap(18, 18, 18)
                .addComponent(saveDialogContextLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        testOutputDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        testOutputDialog.setTitle("Game output");
        testOutputDialog.setBounds(new java.awt.Rectangle(0, 0, 600, 490));
        testOutputDialog.setMinimumSize(new java.awt.Dimension(400, 490));
        testOutputDialog.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        testOutputDialog.setResizable(false);
        testOutputDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                genericDialogWindowClosing(evt);
            }
        });
        testOutputDialog.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                testOutputDialogFocusLost(evt);
            }
        });

        resultsTextBox.setColumns(20);
        resultsTextBox.setLineWrap(true);
        resultsTextBox.setRows(5);
        jScrollPane9.setViewportView(resultsTextBox);

        resultsCloseButton.setText("Close");
        resultsCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsCloseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout testOutputDialogLayout = new javax.swing.GroupLayout(testOutputDialog.getContentPane());
        testOutputDialog.getContentPane().setLayout(testOutputDialogLayout);
        testOutputDialogLayout.setHorizontalGroup(
            testOutputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testOutputDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(testOutputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(resultsCloseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        testOutputDialogLayout.setVerticalGroup(
            testOutputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, testOutputDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resultsCloseButton)
                .addGap(18, 18, 18))
        );

        projectManagerDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        projectManagerDialog.setTitle("Choose a project...");
        projectManagerDialog.setBounds(new java.awt.Rectangle(300, 300, 356, 270));
        projectManagerDialog.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        projectManagerDialog.setResizable(false);
        projectManagerDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                genericDialogWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                projectManagerDialogWindowOpened(evt);
            }
        });

        projectList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        projectList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                projectListValueChanged(evt);
            }
        });
        jScrollPane11.setViewportView(projectList);

        deleteProjectButton.setText("Delete");
        deleteProjectButton.setEnabled(false);
        deleteProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProjectButtonActionPerformed(evt);
            }
        });

        editProjectButton.setText("Open");
        editProjectButton.setEnabled(false);
        editProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editProjectButtonActionPerformed(evt);
            }
        });

        projectNameField.setEnabled(false);
        projectNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                projectNameFieldKeyReleased(evt);
            }
        });

        jLabel20.setText("Name:");

        renameProjectButton.setText("Rename");
        renameProjectButton.setEnabled(false);
        renameProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameProjectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout projectManagerDialogLayout = new javax.swing.GroupLayout(projectManagerDialog.getContentPane());
        projectManagerDialog.getContentPane().setLayout(projectManagerDialogLayout);
        projectManagerDialogLayout.setHorizontalGroup(
            projectManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projectManagerDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(projectManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11)
                    .addGroup(projectManagerDialogLayout.createSequentialGroup()
                        .addGroup(projectManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(projectManagerDialogLayout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(projectNameField))
                            .addComponent(editProjectButton, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(projectManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deleteProjectButton)
                            .addComponent(renameProjectButton))))
                .addContainerGap())
        );
        projectManagerDialogLayout.setVerticalGroup(
            projectManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projectManagerDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(projectManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(projectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(renameProjectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(projectManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteProjectButton)
                    .addComponent(editProjectButton))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        levelManagerDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        levelManagerDialog.setTitle("Choose a level...");
        levelManagerDialog.setBounds(new java.awt.Rectangle(300, 300, 356, 270));
        levelManagerDialog.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        levelManagerDialog.setResizable(false);
        levelManagerDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                genericDialogWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                levelManagerDialogWindowOpened(evt);
            }
        });

        levelList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        levelList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                levelListValueChanged(evt);
            }
        });
        jScrollPane12.setViewportView(levelList);

        deleteLevelButton.setText("Delete");
        deleteLevelButton.setEnabled(false);
        deleteLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLevelButtonActionPerformed(evt);
            }
        });

        editLevelButton.setText("Edit!");
        editLevelButton.setEnabled(false);
        editLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLevelButtonActionPerformed(evt);
            }
        });

        levelNameField.setEnabled(false);
        levelNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                levelNameFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                levelNameFieldKeyReleased(evt);
            }
        });

        jLabel21.setText("Name:");

        renameLevelButton.setText("Rename");
        renameLevelButton.setEnabled(false);
        renameLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameLevelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout levelManagerDialogLayout = new javax.swing.GroupLayout(levelManagerDialog.getContentPane());
        levelManagerDialog.getContentPane().setLayout(levelManagerDialogLayout);
        levelManagerDialogLayout.setHorizontalGroup(
            levelManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelManagerDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(levelManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12)
                    .addGroup(levelManagerDialogLayout.createSequentialGroup()
                        .addComponent(editLevelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteLevelButton))
                    .addGroup(levelManagerDialogLayout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(levelNameField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(renameLevelButton)))
                .addContainerGap())
        );
        levelManagerDialogLayout.setVerticalGroup(
            levelManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelManagerDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(levelManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(levelNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(renameLevelButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(levelManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteLevelButton)
                    .addComponent(editLevelButton))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        objectGalleryDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        objectGalleryDialog.setTitle("Object Gallery");
        objectGalleryDialog.setBounds(new java.awt.Rectangle(0, 0, 450, 300));
        objectGalleryDialog.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        objectGalleryDialog.setResizable(false);
        objectGalleryDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                genericDialogWindowClosing(evt);
            }
        });

        galleryList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        galleryList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                galleryListValueChanged(evt);
            }
        });
        jScrollPane13.setViewportView(galleryList);

        editGalleryObjectButton.setText("Edit");
        editGalleryObjectButton.setEnabled(false);
        editGalleryObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGalleryObjectButtonActionPerformed(evt);
            }
        });

        newGalleryObjectButton.setText("New");
        newGalleryObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGalleryObjectButtonActionPerformed(evt);
            }
        });

        deleteGalleryObjectButton.setText("Delete");
        deleteGalleryObjectButton.setEnabled(false);
        deleteGalleryObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGalleryObjectButtonActionPerformed(evt);
            }
        });

        duplicateGalleryObjectButton.setText("Duplicate");
        duplicateGalleryObjectButton.setEnabled(false);
        duplicateGalleryObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicateGalleryObjectButtonActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Information"));

        inCurrentLevelLabel.setText("N/A in current level");

        inCurrentProjectLabel.setText("N/A in current project");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inCurrentLevelLabel)
                    .addComponent(inCurrentProjectLabel))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inCurrentLevelLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inCurrentProjectLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout objectGalleryDialogLayout = new javax.swing.GroupLayout(objectGalleryDialog.getContentPane());
        objectGalleryDialog.getContentPane().setLayout(objectGalleryDialogLayout);
        objectGalleryDialogLayout.setHorizontalGroup(
            objectGalleryDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectGalleryDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(objectGalleryDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane13)
                    .addGroup(objectGalleryDialogLayout.createSequentialGroup()
                        .addComponent(newGalleryObjectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(duplicateGalleryObjectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editGalleryObjectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteGalleryObjectButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        objectGalleryDialogLayout.setVerticalGroup(
            objectGalleryDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectGalleryDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(objectGalleryDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(objectGalleryDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editGalleryObjectButton)
                    .addComponent(newGalleryObjectButton)
                    .addComponent(deleteGalleryObjectButton)
                    .addComponent(duplicateGalleryObjectButton))
                .addGap(12, 12, 12))
        );

        objectEditorDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        objectEditorDialog.setTitle("Object Editor");
        objectEditorDialog.setBounds(new java.awt.Rectangle(0, 0, 1000, 750));
        objectEditorDialog.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        objectEditorDialog.setPreferredSize(new java.awt.Dimension(1000, 750));
        objectEditorDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                objectEditorDialogWindowClosing(evt);
            }
        });

        objectEditorTabs.setDoubleBuffered(true);
        objectEditorTabs.setOpaque(true);
        objectEditorTabs.setPreferredSize(new java.awt.Dimension(987, 715));

        objectBasicPanel.setPreferredSize(new java.awt.Dimension(975, 710));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Physics"));

        objectGravityCheckbox.setText("Gravity");
        objectGravityCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectGravityCheckboxActionPerformed(evt);
            }
        });

        objectCollidesCheckbox.setText("Collides");
        objectCollidesCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectCollidesCheckboxActionPerformed(evt);
            }
        });

        jLabel37.setText("(only applies to local edits and new instances)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(objectGravityCheckbox)
                        .addGap(18, 18, 18)
                        .addComponent(objectCollidesCheckbox))
                    .addComponent(jLabel37))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(objectGravityCheckbox)
                    .addComponent(objectCollidesCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel37)
                .addGap(0, 57, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Basics"));

        objectTypeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                objectTypeFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                objectTypeFieldKeyTyped(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel33.setText("Object type:");

        jLabel31.setText("Texture file:");

        objectTextureField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                objectTextureFieldKeyReleased(evt);
            }
        });

        objectNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectNameFieldActionPerformed(evt);
            }
        });
        objectNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                objectNameFieldKeyReleased(evt);
            }
        });

        jLabel3.setText("Object name:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(jLabel3)
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(objectTypeField, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                    .addComponent(objectTextureField)
                    .addComponent(objectNameField))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(objectTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(objectTextureField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(objectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 69, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        exportToGalleryButton.setText("Export to gallery");
        exportToGalleryButton.setToolTipText("Export this customized object to the Gallery as a new object type");
        exportToGalleryButton.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportToGalleryButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportToGalleryButton)
                .addContainerGap(107, Short.MAX_VALUE))
        );

        jPanel334.setBorder(javax.swing.BorderFactory.createTitledBorder("Preview"));

        objectPreviewPane.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        objectPreviewPane.setText("Preview unavailable.");
        objectPreviewPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout jPanel334Layout = new javax.swing.GroupLayout(jPanel334);
        jPanel334.setLayout(jPanel334Layout);
        jPanel334Layout.setHorizontalGroup(
            jPanel334Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel334Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(objectPreviewPane, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel334Layout.setVerticalGroup(
            jPanel334Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel334Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(objectPreviewPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout objectBasicPanelLayout = new javax.swing.GroupLayout(objectBasicPanel);
        objectBasicPanel.setLayout(objectBasicPanelLayout);
        objectBasicPanelLayout.setHorizontalGroup(
            objectBasicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectBasicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(objectBasicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel334, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        objectBasicPanelLayout.setVerticalGroup(
            objectBasicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectBasicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(objectBasicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel334, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(objectBasicPanelLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(155, 155, 155)))
                .addContainerGap())
        );

        objectEditorTabs.addTab("Basic", objectBasicPanel);

        objectLogicPanel.setPreferredSize(new java.awt.Dimension(975, 710));

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose a flowchart:"));
        jPanel10.setPreferredSize(new java.awt.Dimension(333, 371));

        flowChooser.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        flowChooser.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                flowChooserValueChanged(evt);
            }
        });
        jScrollPane19.setViewportView(flowChooser);

        jLabel49.setText("Name:");

        flowNameField.setEnabled(false);
        flowNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flowNameFieldActionPerformed(evt);
            }
        });
        flowNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                flowNameFieldKeyReleased(evt);
            }
        });

        newFlowButton.setText("New");
        newFlowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFlowButtonActionPerformed(evt);
            }
        });

        duplicateFlowButton.setText("Duplicate");
        duplicateFlowButton.setEnabled(false);
        duplicateFlowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicateFlowButtonActionPerformed(evt);
            }
        });

        deleteFlowButton.setText("Delete");
        deleteFlowButton.setEnabled(false);
        deleteFlowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFlowButtonActionPerformed(evt);
            }
        });

        runOnSpawnCheckbox.setText("Run when object is spawned");
        runOnSpawnCheckbox.setEnabled(false);
        runOnSpawnCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnSpawnCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(newFlowButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(duplicateFlowButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteFlowButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane19, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel49)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(flowNameField))
                    .addComponent(runOnSpawnCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flowNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newFlowButton)
                    .addComponent(duplicateFlowButton)
                    .addComponent(deleteFlowButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(runOnSpawnCheckbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Available blocks:"));
        jPanel11.setPreferredSize(new java.awt.Dimension(333, 274));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("All Blocks");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Actions");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Set camera position");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Set camera speed");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Set camera target");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Set camera scale");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Set background music");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Set ambient sound");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Set background color");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Enter level");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Execute");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Spawn object");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Remove object");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Wait");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Print (Debugging)");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Jump");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Start dialogue");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Say");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Set animation");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Move");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Move to");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Move to (relative)");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Conditionals");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Does x equal y");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Is x greater than y");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Is x less than y");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Is colliding with");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Is animation complete");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Is object removed");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Is script running");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Variables");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Memory Blocks");
        javax.swing.tree.DefaultMutableTreeNode treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Number");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Object");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Logic flowchart");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Level");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Animation");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Object Properties");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("X-coordinate");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Y-coordinate");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Current texture");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Current animation");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Level Properties");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Name");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Background music");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Background ambience");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Background color");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Operators");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Add x+y");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Subtract x-y");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Divide x/y");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Multiply x*y");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Power of x^y");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Root of x (base y)");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        blockChooser.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        blockChooser.setEnabled(false);
        blockChooser.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                blockChooserValueChanged(evt);
            }
        });
        jScrollPane26.setViewportView(blockChooser);

        addBlockButton.setText("Add selected block");
        addBlockButton.setEnabled(false);
        addBlockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBlockButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane26, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(addBlockButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jScrollPane26, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addBlockButton)
                .addContainerGap())
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Designer Window"));

        flowCanvas.setBackground(new java.awt.Color(219, 218, 218));
        flowCanvas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        flowCanvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                flowCanvasMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                flowCanvasMouseReleased(evt);
            }
        });
        flowCanvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                flowCanvasMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                flowCanvasMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout flowCanvasLayout = new javax.swing.GroupLayout(flowCanvas);
        flowCanvas.setLayout(flowCanvasLayout);
        flowCanvasLayout.setHorizontalGroup(
            flowCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        flowCanvasLayout.setVerticalGroup(
            flowCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel19.setText("Parametre");

        blockParamChooser.setEnabled(false);
        blockParamChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockParamChooserActionPerformed(evt);
            }
        });

        jLabel25.setText("'s default value =");

        blockParamValueField.setEnabled(false);
        blockParamValueField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                blockParamValueFieldKeyReleased(evt);
            }
        });

        deleteBlockButton.setText("Delete block");
        deleteBlockButton.setEnabled(false);
        deleteBlockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBlockButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(flowCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blockParamChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blockParamValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                        .addComponent(deleteBlockButton)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(flowCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel19)
                        .addComponent(blockParamChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(blockParamValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel25))
                    .addComponent(deleteBlockButton))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout objectLogicPanelLayout = new javax.swing.GroupLayout(objectLogicPanel);
        objectLogicPanel.setLayout(objectLogicPanelLayout);
        objectLogicPanelLayout.setHorizontalGroup(
            objectLogicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectLogicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(objectLogicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        objectLogicPanelLayout.setVerticalGroup(
            objectLogicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectLogicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(objectLogicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(objectLogicPanelLayout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)))
                .addContainerGap())
        );

        objectEditorTabs.addTab("Logic", objectLogicPanel);

        objectAnimationPanel.setPreferredSize(new java.awt.Dimension(975, 650));

        animationPropertiesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Animation Properties"));

        animationImageField.setEnabled(false);
        animationImageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                animationImageFieldKeyReleased(evt);
            }
        });

        jLabel5.setText("Image file:");

        jLabel30.setText("Frames:");

        animationFrameChooser.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        animationFrameChooser.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        animationFrameChooser.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                animationFrameChooserValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(animationFrameChooser);

        jLabel10.setText("Dimensions:");

        animationFrameDimensionsField.setEnabled(false);
        animationFrameDimensionsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animationFrameDimensionsFieldActionPerformed(evt);
            }
        });
        animationFrameDimensionsField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                animationFrameDimensionsFieldKeyReleased(evt);
            }
        });

        jLabel18.setText("Frame duration:");

        animationFrameDurationField.setEnabled(false);
        animationFrameDurationField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animationFrameDurationFieldActionPerformed(evt);
            }
        });
        animationFrameDurationField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                animationFrameDurationFieldKeyReleased(evt);
            }
        });

        animationLoopCheckbox.setText("Loop");
        animationLoopCheckbox.setEnabled(false);
        animationLoopCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animationLoopCheckboxActionPerformed(evt);
            }
        });

        animationAddFrameButton.setText("+");
        animationAddFrameButton.setEnabled(false);
        animationAddFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animationAddFrameButtonActionPerformed(evt);
            }
        });

        animationDeleteFrameButton.setText("-");
        animationDeleteFrameButton.setEnabled(false);
        animationDeleteFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animationDeleteFrameButtonActionPerformed(evt);
            }
        });

        jLabel22.setText("milliseconds");

        jLabel24.setText("pixels");

        javax.swing.GroupLayout animationPropertiesPanelLayout = new javax.swing.GroupLayout(animationPropertiesPanel);
        animationPropertiesPanel.setLayout(animationPropertiesPanelLayout);
        animationPropertiesPanelLayout.setHorizontalGroup(
            animationPropertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animationPropertiesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(animationPropertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(animationPropertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(animationPropertiesPanelLayout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(animationImageField))
                        .addGroup(animationPropertiesPanelLayout.createSequentialGroup()
                            .addComponent(jLabel30)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(animationLoopCheckbox)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(animationAddFrameButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(animationDeleteFrameButton))
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                        .addGroup(animationPropertiesPanelLayout.createSequentialGroup()
                            .addComponent(jLabel10)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(animationFrameDimensionsField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel24)))
                    .addGroup(animationPropertiesPanelLayout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(animationFrameDurationField, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel22)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        animationPropertiesPanelLayout.setVerticalGroup(
            animationPropertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animationPropertiesPanelLayout.createSequentialGroup()
                .addGroup(animationPropertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(animationImageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(animationPropertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(animationFrameDurationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(animationPropertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(animationAddFrameButton)
                    .addComponent(animationDeleteFrameButton)
                    .addComponent(animationLoopCheckbox)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(animationPropertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(animationFrameDimensionsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addContainerGap())
        );

        chooseAnimationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose an animation:"));

        jScrollPane2.setPreferredSize(new java.awt.Dimension(333, 130));

        animationChooser.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        animationChooser.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        animationChooser.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                animationChooserValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(animationChooser);

        jLabel17.setText("Name:");

        animationNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                animationNameFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                animationNameFieldKeyReleased(evt);
            }
        });

        newAnimationButton.setText("New");
        newAnimationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAnimationButtonActionPerformed(evt);
            }
        });

        duplicateAnimationButton.setText("Duplicate");
        duplicateAnimationButton.setEnabled(false);
        duplicateAnimationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicateAnimationButtonActionPerformed(evt);
            }
        });

        deleteAnimationButton.setText("Delete");
        deleteAnimationButton.setEnabled(false);
        deleteAnimationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAnimationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chooseAnimationPanelLayout = new javax.swing.GroupLayout(chooseAnimationPanel);
        chooseAnimationPanel.setLayout(chooseAnimationPanelLayout);
        chooseAnimationPanelLayout.setHorizontalGroup(
            chooseAnimationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseAnimationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chooseAnimationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(chooseAnimationPanelLayout.createSequentialGroup()
                        .addComponent(newAnimationButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(duplicateAnimationButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteAnimationButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(chooseAnimationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(animationNameField)))
                .addContainerGap())
        );
        chooseAnimationPanelLayout.setVerticalGroup(
            chooseAnimationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseAnimationPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chooseAnimationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(animationNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chooseAnimationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(duplicateAnimationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(chooseAnimationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(newAnimationButton)
                        .addComponent(deleteAnimationButton)))
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Preview:"));

        framePreview.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        framePreview.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel40.setText("Zoom:");

        animationPreviewZoomChooser.setValue(1);
        animationPreviewZoomChooser.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                animationPreviewZoomChooserStateChanged(evt);
            }
        });

        toggleAnimationPreviewButton.setText("Play");
        toggleAnimationPreviewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleAnimationPreviewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(framePreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(toggleAnimationPreviewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(animationPreviewZoomChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 325, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toggleAnimationPreviewButton)
                    .addComponent(jLabel40)
                    .addComponent(animationPreviewZoomChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(framePreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout objectAnimationPanelLayout = new javax.swing.GroupLayout(objectAnimationPanel);
        objectAnimationPanel.setLayout(objectAnimationPanelLayout);
        objectAnimationPanelLayout.setHorizontalGroup(
            objectAnimationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectAnimationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(objectAnimationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(animationPropertiesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chooseAnimationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        objectAnimationPanelLayout.setVerticalGroup(
            objectAnimationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectAnimationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(objectAnimationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(objectAnimationPanelLayout.createSequentialGroup()
                        .addComponent(chooseAnimationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(animationPropertiesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        objectEditorTabs.addTab("Animations", objectAnimationPanel);

        objectDialoguePanel.setPreferredSize(new java.awt.Dimension(975, 710));

        chooseDialoguePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose a dialogue:"));
        chooseDialoguePanel.setPreferredSize(new java.awt.Dimension(333, 313));

        dialogueChooser.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        dialogueChooser.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dialogueChooser.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dialogueChooserValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(dialogueChooser);

        newDialogueButton.setText("New");
        newDialogueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDialogueButtonActionPerformed(evt);
            }
        });

        duplicateDialogueButton.setText("Duplicate");
        duplicateDialogueButton.setEnabled(false);
        duplicateDialogueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicateDialogueButtonActionPerformed(evt);
            }
        });

        deleteDialogueButton.setText("Delete");
        deleteDialogueButton.setEnabled(false);
        deleteDialogueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDialogueButtonActionPerformed(evt);
            }
        });

        dialogueNameField.setEnabled(false);
        dialogueNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dialogueNameFieldKeyReleased(evt);
            }
        });

        jLabel23.setText("Name:");

        javax.swing.GroupLayout chooseDialoguePanelLayout = new javax.swing.GroupLayout(chooseDialoguePanel);
        chooseDialoguePanel.setLayout(chooseDialoguePanelLayout);
        chooseDialoguePanelLayout.setHorizontalGroup(
            chooseDialoguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseDialoguePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chooseDialoguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7)
                    .addGroup(chooseDialoguePanelLayout.createSequentialGroup()
                        .addComponent(newDialogueButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(duplicateDialogueButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteDialogueButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(chooseDialoguePanelLayout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dialogueNameField)))
                .addContainerGap())
        );
        chooseDialoguePanelLayout.setVerticalGroup(
            chooseDialoguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseDialoguePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chooseDialoguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dialogueNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chooseDialoguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newDialogueButton)
                    .addComponent(deleteDialogueButton)
                    .addComponent(duplicateDialogueButton))
                .addContainerGap())
        );

        chooseDialogueEventPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Dialogue Properties"));

        dialogueEventChooser.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dialogueEventChooser.setEnabled(false);
        dialogueEventChooser.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dialogueEventChooserValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(dialogueEventChooser);

        addPlayerChoiceButton.setText("Add player choice");
        addPlayerChoiceButton.setEnabled(false);

        addThisSpeakEventButton.setText("Speak (this object)");
        addThisSpeakEventButton.setEnabled(false);

        addOtherSpeakEventButton.setText("Speak (other object)");
        addOtherSpeakEventButton.setEnabled(false);

        deleteDialogueEventButton.setText("Delete");
        deleteDialogueEventButton.setEnabled(false);

        dialogueWaitCheckbox.setText("Wait");
        dialogueWaitCheckbox.setEnabled(false);

        dialogueEventMoveUpButton.setText("Move up");
        dialogueEventMoveUpButton.setEnabled(false);

        dialogueEventMoveDownButton.setText("Move down");
        dialogueEventMoveDownButton.setEnabled(false);

        jLabel27.setText("Events:");

        jLabel32.setText("Links to:");
        jLabel32.setEnabled(false);

        linkToField.setEnabled(false);

        linkToScriptRadioButton.setText("Script");
        linkToScriptRadioButton.setEnabled(false);

        linkToDialogueRadioButton.setText("Dialogue");
        linkToDialogueRadioButton.setEnabled(false);

        jSeparator3.setForeground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout chooseDialogueEventPanelLayout = new javax.swing.GroupLayout(chooseDialogueEventPanel);
        chooseDialogueEventPanel.setLayout(chooseDialogueEventPanelLayout);
        chooseDialogueEventPanelLayout.setHorizontalGroup(
            chooseDialogueEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseDialogueEventPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chooseDialogueEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3)
                    .addGroup(chooseDialogueEventPanelLayout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(chooseDialogueEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(chooseDialogueEventPanelLayout.createSequentialGroup()
                                .addComponent(linkToScriptRadioButton)
                                .addGap(8, 8, 8)
                                .addComponent(linkToDialogueRadioButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(linkToField)))
                    .addGroup(chooseDialogueEventPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(chooseDialogueEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dialogueEventMoveDownButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dialogueEventMoveUpButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteDialogueEventButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dialogueWaitCheckbox)))
                    .addGroup(chooseDialogueEventPanelLayout.createSequentialGroup()
                        .addGroup(chooseDialogueEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(addThisSpeakEventButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addPlayerChoiceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addOtherSpeakEventButton)
                        .addGap(0, 41, Short.MAX_VALUE)))
                .addContainerGap())
        );
        chooseDialogueEventPanelLayout.setVerticalGroup(
            chooseDialogueEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseDialogueEventPanelLayout.createSequentialGroup()
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chooseDialogueEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(chooseDialogueEventPanelLayout.createSequentialGroup()
                        .addComponent(dialogueEventMoveUpButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dialogueEventMoveDownButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteDialogueEventButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dialogueWaitCheckbox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chooseDialogueEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addThisSpeakEventButton)
                    .addComponent(addOtherSpeakEventButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPlayerChoiceButton)
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(chooseDialogueEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(linkToField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(chooseDialogueEventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(linkToDialogueRadioButton)
                    .addComponent(linkToScriptRadioButton))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Event Editor"));

        dialogueSayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel13.setText("Say:");

        dialogueSpeechTextField.setEnabled(false);

        javax.swing.GroupLayout dialogueSayPanelLayout = new javax.swing.GroupLayout(dialogueSayPanel);
        dialogueSayPanel.setLayout(dialogueSayPanelLayout);
        dialogueSayPanelLayout.setHorizontalGroup(
            dialogueSayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogueSayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dialogueSpeechTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                .addContainerGap())
        );
        dialogueSayPanelLayout.setVerticalGroup(
            dialogueSayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogueSayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogueSayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(dialogueSpeechTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dialogueChoicePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel15.setText("Which triggers:");

        choiceEventValueField.setEnabled(false);
        choiceEventValueField.setMaximumSize(new java.awt.Dimension(258, 45345345));
        choiceEventValueField.setMinimumSize(new java.awt.Dimension(258, 0));
        choiceEventValueField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                choiceEventValueFieldKeyReleased(evt);
            }
        });

        dialogueChoiceList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dialogueChoiceList.setEnabled(false);
        jScrollPane5.setViewportView(dialogueChoiceList);

        deleteChoiceButton.setText("Delete");
        deleteChoiceButton.setEnabled(false);

        jLabel7.setText("Add new:");

        addNewChoiceField.setEnabled(false);

        moveChoiceUpButton.setText("Move up");
        moveChoiceUpButton.setEnabled(false);

        moveChoiceDownButton.setText("Move down");
        moveChoiceDownButton.setEnabled(false);

        choiceEventResponseToggle.setText("Response");
        choiceEventResponseToggle.setEnabled(false);

        choiceEventScriptToggle.setText("Script");
        choiceEventScriptToggle.setEnabled(false);

        choiceEventDialogueToggle.setText("Dialogue");
        choiceEventDialogueToggle.setEnabled(false);

        jLabel26.setText("Choices:");

        javax.swing.GroupLayout dialogueChoicePanelLayout = new javax.swing.GroupLayout(dialogueChoicePanel);
        dialogueChoicePanel.setLayout(dialogueChoicePanelLayout);
        dialogueChoicePanelLayout.setHorizontalGroup(
            dialogueChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogueChoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogueChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogueChoicePanelLayout.createSequentialGroup()
                        .addComponent(moveChoiceUpButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveChoiceDownButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteChoiceButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogueChoicePanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addNewChoiceField))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(dialogueChoicePanelLayout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(dialogueChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15)
                    .addComponent(choiceEventValueField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(choiceEventResponseToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                    .addComponent(choiceEventDialogueToggle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(choiceEventScriptToggle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        dialogueChoicePanelLayout.setVerticalGroup(
            dialogueChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogueChoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogueChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialogueChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialogueChoicePanelLayout.createSequentialGroup()
                        .addComponent(choiceEventValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(choiceEventResponseToggle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(choiceEventScriptToggle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(choiceEventDialogueToggle)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialogueChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(addNewChoiceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialogueChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteChoiceButton)
                    .addComponent(moveChoiceUpButton)
                    .addComponent(moveChoiceDownButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dialogueSayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dialogueChoicePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(dialogueSayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dialogueChoicePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(289, 289, 289))
        );

        javax.swing.GroupLayout objectDialoguePanelLayout = new javax.swing.GroupLayout(objectDialoguePanel);
        objectDialoguePanel.setLayout(objectDialoguePanelLayout);
        objectDialoguePanelLayout.setHorizontalGroup(
            objectDialoguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectDialoguePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(objectDialoguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chooseDialoguePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chooseDialogueEventPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        objectDialoguePanelLayout.setVerticalGroup(
            objectDialoguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectDialoguePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(objectDialoguePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(objectDialoguePanelLayout.createSequentialGroup()
                        .addComponent(chooseDialoguePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(chooseDialogueEventPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        objectEditorTabs.addTab("Dialogue", objectDialoguePanel);

        javax.swing.GroupLayout objectEditorDialogLayout = new javax.swing.GroupLayout(objectEditorDialog.getContentPane());
        objectEditorDialog.getContentPane().setLayout(objectEditorDialogLayout);
        objectEditorDialogLayout.setHorizontalGroup(
            objectEditorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(objectEditorTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 987, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        objectEditorDialogLayout.setVerticalGroup(
            objectEditorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(objectEditorTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        levelEditorDialog.setTitle("Editing level properties");
        levelEditorDialog.setBounds(new java.awt.Rectangle(0, 0, 660, 592));
        levelEditorDialog.setResizable(false);

        levelEditorTabs.setPreferredSize(new java.awt.Dimension(680, 626));

        levelLightingPanel.setPreferredSize(new java.awt.Dimension(660, 621));

        levelColorPicker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                levelColorPickerMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                levelColorPickerMouseReleased(evt);
            }
        });
        levelColorPicker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                levelColorPickerPropertyChange(evt);
            }
        });
        levelColorPicker.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                levelColorPickerVetoableChange(evt);
            }
        });

        ambientIntensitySlider.setMajorTickSpacing(255);
        ambientIntensitySlider.setMaximum(200);
        ambientIntensitySlider.setToolTipText("Adjust the intensity of the ambient lighting");
        ambientIntensitySlider.setValue(0);
        ambientIntensitySlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ambientIntensitySliderMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ambientIntensitySliderMouseReleased(evt);
            }
        });
        ambientIntensitySlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                ambientIntensitySliderMouseDragged(evt);
            }
        });

        jButton2.setText("Set top color");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel8.setText("Background colors:");

        jButton3.setText("Set bottom color");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel9.setText("Ambient lighting:");

        jLabel14.setText("Intensity:");

        jButton5.setText("Set color");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        topBackgroundColorLabel.setEditable(false);
        topBackgroundColorLabel.setBackground(new java.awt.Color(0, 0, 0));
        topBackgroundColorLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                topBackgroundColorLabelMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(topBackgroundColorLabel);

        bottomBackgroundColorLabel.setEditable(false);
        bottomBackgroundColorLabel.setBackground(new java.awt.Color(0, 0, 0));
        bottomBackgroundColorLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bottomBackgroundColorLabelMouseClicked(evt);
            }
        });
        jScrollPane17.setViewportView(bottomBackgroundColorLabel);

        ambientColorLabel.setEditable(false);
        ambientColorLabel.setBackground(new java.awt.Color(0, 0, 0));
        ambientColorLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ambientColorLabelMouseClicked(evt);
            }
        });
        jScrollPane18.setViewportView(ambientColorLabel);

        javax.swing.GroupLayout levelLightingPanelLayout = new javax.swing.GroupLayout(levelLightingPanel);
        levelLightingPanel.setLayout(levelLightingPanelLayout);
        levelLightingPanelLayout.setHorizontalGroup(
            levelLightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelLightingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(levelLightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(levelColorPicker, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                    .addGroup(levelLightingPanelLayout.createSequentialGroup()
                        .addGroup(levelLightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(levelLightingPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2))
                            .addGroup(levelLightingPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3)))
                        .addGap(18, 18, 18)
                        .addGroup(levelLightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(levelLightingPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                            .addComponent(jLabel9)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, levelLightingPanelLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ambientIntensitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        levelLightingPanelLayout.setVerticalGroup(
            levelLightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelLightingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(levelColorPicker, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(levelLightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(levelLightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(levelLightingPanelLayout.createSequentialGroup()
                        .addGroup(levelLightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(levelLightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(levelLightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton3)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(levelLightingPanelLayout.createSequentialGroup()
                        .addGroup(levelLightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton5)
                            .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ambientIntensitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(169, Short.MAX_VALUE))
        );

        levelEditorTabs.addTab("Lighting", levelLightingPanel);

        levelAudioPanel.setPreferredSize(new java.awt.Dimension(660, 621));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Basic"));

        jLabel29.setText("Background music");

        backgroundMusicField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                backgroundMusicFieldKeyReleased(evt);
            }
        });

        loopBackgroundMusicCheckbox.setText("Loop");
        loopBackgroundMusicCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopBackgroundMusicCheckboxActionPerformed(evt);
            }
        });

        autoBackgroundMusicCheckbox.setText("Start immediately");
        autoBackgroundMusicCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoBackgroundMusicCheckboxActionPerformed(evt);
            }
        });

        loopAmbientSoundCheckbox.setText("Loop");
        loopAmbientSoundCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopAmbientSoundCheckboxActionPerformed(evt);
            }
        });

        autoAmbientSoundCheckbox.setText("Start immediately");
        autoAmbientSoundCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoAmbientSoundCheckboxActionPerformed(evt);
            }
        });

        ambientSoundField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ambientSoundFieldKeyReleased(evt);
            }
        });

        jLabel36.setText("Ambient sound effects");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(loopBackgroundMusicCheckbox)
                        .addGap(18, 18, 18)
                        .addComponent(autoBackgroundMusicCheckbox))
                    .addComponent(jLabel29)
                    .addComponent(backgroundMusicField, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(loopAmbientSoundCheckbox)
                        .addGap(18, 18, 18)
                        .addComponent(autoAmbientSoundCheckbox))
                    .addComponent(jLabel36)
                    .addComponent(ambientSoundField, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(123, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ambientSoundField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loopAmbientSoundCheckbox)
                            .addComponent(autoAmbientSoundCheckbox)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backgroundMusicField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loopBackgroundMusicCheckbox)
                            .addComponent(autoBackgroundMusicCheckbox))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Volume Control"));

        backgroundMusicVolumeSlider.setMajorTickSpacing(1);
        backgroundMusicVolumeSlider.setMaximum(2);
        backgroundMusicVolumeSlider.setPaintTicks(true);
        backgroundMusicVolumeSlider.setValue(1);
        backgroundMusicVolumeSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backgroundMusicVolumeSliderMouseClicked(evt);
            }
        });
        backgroundMusicVolumeSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                backgroundMusicVolumeSliderMouseDragged(evt);
            }
        });

        jLabel38.setText("Music:");

        ambientSoundVolumeSlider.setMajorTickSpacing(1);
        ambientSoundVolumeSlider.setMaximum(2);
        ambientSoundVolumeSlider.setPaintTicks(true);
        ambientSoundVolumeSlider.setValue(1);
        ambientSoundVolumeSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ambientSoundVolumeSliderMouseClicked(evt);
            }
        });
        ambientSoundVolumeSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                ambientSoundVolumeSliderMouseDragged(evt);
            }
        });

        jLabel39.setText("Ambience:");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel39)
                    .addComponent(jLabel38))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backgroundMusicVolumeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                    .addComponent(ambientSoundVolumeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backgroundMusicVolumeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ambientSoundVolumeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout levelAudioPanelLayout = new javax.swing.GroupLayout(levelAudioPanel);
        levelAudioPanel.setLayout(levelAudioPanelLayout);
        levelAudioPanelLayout.setHorizontalGroup(
            levelAudioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelAudioPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(levelAudioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        levelAudioPanelLayout.setVerticalGroup(
            levelAudioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelAudioPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(288, Short.MAX_VALUE))
        );

        levelEditorTabs.addTab("Audio", levelAudioPanel);

        javax.swing.GroupLayout levelEditorDialogLayout = new javax.swing.GroupLayout(levelEditorDialog.getContentPane());
        levelEditorDialog.getContentPane().setLayout(levelEditorDialogLayout);
        levelEditorDialogLayout.setHorizontalGroup(
            levelEditorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(levelEditorTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
        );
        levelEditorDialogLayout.setVerticalGroup(
            levelEditorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(levelEditorTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        errorCheckerDialog.setTitle("Project Errors");
        errorCheckerDialog.setBounds(new java.awt.Rectangle(0, 0, 540, 650));
        errorCheckerDialog.setResizable(false);

        jLabel43.setText("Check your project for errors and quickly resolve them:");

        scanForErrorsButton.setText("Scan for errors");
        scanForErrorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanForErrorsButtonActionPerformed(evt);
            }
        });

        jLabel44.setText("Results:");

        jButton6.setText("Go to...");
        jButton6.setEnabled(false);

        errorScanResults.setEditable(false);
        errorScanResults.setColumns(45);
        errorScanResults.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        errorScanResults.setRows(5);
        jScrollPane23.setViewportView(errorScanResults);

        javax.swing.GroupLayout errorCheckerDialogLayout = new javax.swing.GroupLayout(errorCheckerDialog.getContentPane());
        errorCheckerDialog.getContentPane().setLayout(errorCheckerDialogLayout);
        errorCheckerDialogLayout.setHorizontalGroup(
            errorCheckerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorCheckerDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(errorCheckerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane23, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                    .addGroup(errorCheckerDialogLayout.createSequentialGroup()
                        .addComponent(scanForErrorsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(errorCheckerDialogLayout.createSequentialGroup()
                        .addGroup(errorCheckerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel43)
                            .addComponent(jLabel44))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        errorCheckerDialogLayout.setVerticalGroup(
            errorCheckerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorCheckerDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel43)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(errorCheckerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scanForErrorsButton)
                    .addComponent(jButton6))
                .addGap(19, 19, 19)
                .addComponent(jLabel44)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane23, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)
                .addContainerGap())
        );

        helpDialog.setTitle("Help");
        helpDialog.setBounds(new java.awt.Rectangle(0, 0, 840, 630));
        helpDialog.setResizable(false);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane24.setViewportView(jTextArea1);

        jLabel46.setText("Choose a help topic:");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "[Welcome]", "[Important Stuff]", "[Basics]", "    Tools", "       - Select", "       - Camera", "       - Move", "       - Resize", "    Sidebar", "       - Object Gallery", "       - Object Properties", "       - Level Properties", "[Project]", "    Saving your project", "    Error checking", "[Levels]", "    Level Chooser", "    Level Editor", "       - Lighting", "       - Audio", "       - Scripts", "[Objects]", "    Using the Object Gallery", "    Object Editor", "        - Basics", "        - Scripts", "        - Animations", "        - Dialogue", "[Scripting]", "    Using commands", "    Command parametres", "    Available commands", "[Assets]", "    Importing assets", "    The assets folder", "[Testing]", "    Running your project", "        - From the current level", "        - From the beginning" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane25.setViewportView(jList1);

        javax.swing.GroupLayout helpDialogLayout = new javax.swing.GroupLayout(helpDialog.getContentPane());
        helpDialog.getContentPane().setLayout(helpDialogLayout);
        helpDialogLayout.setHorizontalGroup(
            helpDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(helpDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel46)
                    .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane24, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                .addContainerGap())
        );
        helpDialogLayout.setVerticalGroup(
            helpDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, helpDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(helpDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane24)
                    .addGroup(helpDialogLayout.createSequentialGroup()
                        .addComponent(jLabel46)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane25, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(1, 1, 1));
        setBounds(new java.awt.Rectangle(150, 150, 1170, 790));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(790, 790));
        setModalExclusionType(null);
        setName("windowFrame"); // NOI18N
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        editorPanel.setBackground(new java.awt.Color(215, 215, 215));
        editorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Editor"));
        editorPanel.setMinimumSize(new java.awt.Dimension(1, 1));
        editorPanel.setOpaque(false);
        editorPanel.setPreferredSize(new java.awt.Dimension(0, 0));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        jLabel1.setText("Object Gallery");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        jLabel2.setText("Object Properties");

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        jLabel4.setText("Level Properties");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        jLabel6.setText("Tools");

        objectTypeChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Distance", "Background", "Normal", "Foreground"}));
        objectTypeChooser.setToolTipText("Choose the layer the object lies in");
        objectTypeChooser.setEnabled(false);
        objectTypeChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectTypeChooserActionPerformed(evt);
            }
        });
        objectTypeChooser.setSelectedIndex(-1);

        galleryListSidebar.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        galleryListSidebar.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                galleryListSidebarValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(galleryListSidebar);

        spawnButton.setText("Spawn selected");
        spawnButton.setToolTipText("Spawn the object chosen from the list above");
        spawnButton.setEnabled(false);
        spawnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spawnButtonActionPerformed(evt);
            }
        });

        selectButton.setText("Select");
        selectButton.setToolTipText("Press 1-4 to switch between tools");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        moveButton.setText("Move");
        moveButton.setToolTipText("Press 1-4 to switch between tools");
        moveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButtonActionPerformed(evt);
            }
        });

        cameraButton.setText("Camera");
        cameraButton.setToolTipText("Press 1-4 to switch between tools");
        cameraButton.setEnabled(false);
        cameraButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cameraButtonActionPerformed(evt);
            }
        });

        resizeButton.setText("Resize");
        resizeButton.setToolTipText("Press 1-4 to switch between tools");
        resizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeButtonActionPerformed(evt);
            }
        });

        bringForwardButton.setText("Forwards");
        bringForwardButton.setToolTipText("Send forward");
        bringForwardButton.setEnabled(false);
        bringForwardButton.setMaximumSize(new java.awt.Dimension(85, 23));
        bringForwardButton.setMinimumSize(new java.awt.Dimension(85, 23));
        bringForwardButton.setPreferredSize(new java.awt.Dimension(85, 23));
        bringForwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bringForwardButtonActionPerformed(evt);
            }
        });

        sendBackwardsButton.setText("Backwards");
        sendBackwardsButton.setToolTipText("Send backwards");
        sendBackwardsButton.setEnabled(false);
        sendBackwardsButton.setMaximumSize(new java.awt.Dimension(85, 23));
        sendBackwardsButton.setPreferredSize(new java.awt.Dimension(85, 23));
        sendBackwardsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBackwardsButtonActionPerformed(evt);
            }
        });

        objectCloneButton.setText("Clone");
        objectCloneButton.setEnabled(false);
        objectCloneButton.setPreferredSize(new java.awt.Dimension(85, 23));
        objectCloneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectCloneButtonActionPerformed(evt);
            }
        });

        spawnGeneralButton.setText("Create hitbox");
        spawnGeneralButton.setToolTipText("Spawn an object with no texture or animations");
        spawnGeneralButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spawnGeneralButtonActionPerformed(evt);
            }
        });

        viewAdvancedObjectOptionsButton.setText("Edit object...");
        viewAdvancedObjectOptionsButton.setEnabled(false);
        viewAdvancedObjectOptionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAdvancedObjectOptionsButtonActionPerformed(evt);
            }
        });

        jLabel12.setText("(Press number keys to switch tools faster)");

        objectGalleryButton.setText("Edit...");
        objectGalleryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectGalleryButtonActionPerformed(evt);
            }
        });

        objectNameLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        objectNameLabel.setText("(select an object to view its properties)");

        jLabel28.setText("Layer:");

        jButton1.setText("Edit level properties...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        levelSpawnField.setText("0 0");
        levelSpawnField.setPreferredSize(new java.awt.Dimension(8, 20));
        levelSpawnField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                levelSpawnFieldFocusLost(evt);
            }
        });

        jLabel11.setText("Spawn");

        jLabel16.setText("Camera");

        camPosField.setText("0 0");
        camPosField.setPreferredSize(new java.awt.Dimension(8, 20));
        camPosField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camPosFieldActionPerformed(evt);
            }
        });
        camPosField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                camPosFieldFocusLost(evt);
            }
        });

        levelZoomSlider.setMajorTickSpacing(4);
        levelZoomSlider.setMaximum(8);
        levelZoomSlider.setMinorTickSpacing(1);
        levelZoomSlider.setPaintTicks(true);
        levelZoomSlider.setSnapToTicks(true);
        levelZoomSlider.setToolTipText("Adjust the game camera's zoom");
        levelZoomSlider.setValue(4);
        levelZoomSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                levelZoomSliderMouseReleased(evt);
            }
        });

        jLabel45.setText("Render scale:");

        javax.swing.GroupLayout editorPanelLayout = new javax.swing.GroupLayout(editorPanel);
        editorPanel.setLayout(editorPanelLayout);
        editorPanelLayout.setHorizontalGroup(
            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editorPanelLayout.createSequentialGroup()
                        .addComponent(spawnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spawnGeneralButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addComponent(objectNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(editorPanelLayout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(objectTypeChooser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(viewAdvancedObjectOptionsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(editorPanelLayout.createSequentialGroup()
                        .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(levelSpawnField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editorPanelLayout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(camPosField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(editorPanelLayout.createSequentialGroup()
                        .addComponent(jLabel45)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(levelZoomSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
                    .addGroup(editorPanelLayout.createSequentialGroup()
                        .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editorPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(objectGalleryButton))
                            .addGroup(editorPanelLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel12))
                            .addGroup(editorPanelLayout.createSequentialGroup()
                                .addComponent(selectButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cameraButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resizeButton))
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(editorPanelLayout.createSequentialGroup()
                        .addComponent(bringForwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendBackwardsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(objectCloneButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        editorPanelLayout.setVerticalGroup(
            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editorPanelLayout.createSequentialGroup()
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectButton)
                    .addComponent(cameraButton)
                    .addComponent(moveButton)
                    .addComponent(resizeButton))
                .addGap(18, 18, 18)
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(objectGalleryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spawnButton)
                    .addComponent(spawnGeneralButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(objectNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(objectTypeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bringForwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendBackwardsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(objectCloneButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewAdvancedObjectOptionsButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(camPosField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(levelSpawnField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(levelZoomSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(197, Short.MAX_VALUE))
        );

        sceneCanvas.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                sceneCanvasMouseWheelMoved(evt);
            }
        });
        sceneCanvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sceneCanvasMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sceneCanvasMousePressed(evt);
            }
        });
        sceneCanvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sceneCanvasMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                sceneCanvasMouseMoved(evt);
            }
        });
        sceneCanvas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sceneCanvasKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sceneCanvasKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout sceneCanvasLayout = new javax.swing.GroupLayout(sceneCanvas);
        sceneCanvas.setLayout(sceneCanvasLayout);
        sceneCanvasLayout.setHorizontalGroup(
            sceneCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 838, Short.MAX_VALUE)
        );
        sceneCanvasLayout.setVerticalGroup(
            sceneCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenu1.setText("Project");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("New project");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Save");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Open project manager...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);
        jMenu1.add(jSeparator1);

        jMenuItem9.setText("View root directory");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setText("Check project for errors...");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        menuBar.add(jMenu1);

        levelMenu.setText("Levels");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("New level");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        levelMenu.add(jMenuItem3);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Open level manager...");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        levelMenu.add(jMenuItem7);

        menuBar.add(levelMenu);

        jMenu2.setText("Assets");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem1.setText("Reload project assets");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);
        jMenu2.add(jSeparator2);

        jMenuItem2.setText("Open assets folder");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        menuBar.add(jMenu2);

        jMenu3.setText("Run");

        runProjectButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        runProjectButton.setText("Run project...");
        runProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runProjectButtonActionPerformed(evt);
            }
        });
        jMenu3.add(runProjectButton);

        runProjectAtLevelButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        runProjectAtLevelButton.setText("Run project at current level...");
        runProjectAtLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runProjectAtLevelButtonActionPerformed(evt);
            }
        });
        jMenu3.add(runProjectAtLevelButton);

        menuBar.add(jMenu3);

        jMenu4.setText("Help");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });
        menuBar.add(jMenu4);

        statusIndicator.setEnabled(false);
        statusIndicator.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        menuBar.add(statusIndicator);

        downloadUpdateButton.setText("Click here to download the latest version!");
        downloadUpdateButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        downloadUpdateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downloadUpdateButtonMouseClicked(evt);
            }
        });
        downloadUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadUpdateButtonActionPerformed(evt);
            }
        });
        menuBar.add(downloadUpdateButton);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(editorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sceneCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(editorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(sceneCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sceneCanvasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sceneCanvasKeyPressed
        
        if (Scene.SELECTED_OBJECT != null) {
            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
                Scene.removeObject(Scene.SELECTED_OBJECT);
            }
        }
        
        if (evt.getKeyCode() == KeyEvent.VK_1) {
            Scene.SELECTED_TOOL = Scene.SELECT_TOOL;
            selectButton.setEnabled(false);
            cameraButton.setEnabled(true);
            moveButton.setEnabled(true);
            resizeButton.setEnabled(true);
        }
        if (evt.getKeyCode() == KeyEvent.VK_2) {
            Scene.SELECTED_TOOL = Scene.CAMERA_TOOL;
            selectButton.setEnabled(true);
            cameraButton.setEnabled(false);
            moveButton.setEnabled(true);
            resizeButton.setEnabled(true);
        }
        if (evt.getKeyCode() == KeyEvent.VK_3) {
            Scene.SELECTED_TOOL = Scene.MOVE_TOOL;
            selectButton.setEnabled(true);
            cameraButton.setEnabled(true);
            moveButton.setEnabled(false);
            resizeButton.setEnabled(true);
        }
        if (evt.getKeyCode() == KeyEvent.VK_4) {
            Scene.SELECTED_TOOL = Scene.RESIZE_TOOL;
            selectButton.setEnabled(true);
            cameraButton.setEnabled(true);
            moveButton.setEnabled(true);
            resizeButton.setEnabled(false);
        }
        
        if (evt.getKeyChar() == '=') { //plus sign w/o shift
            Scene.zoomCamera(1);
        }
        if (evt.getKeyChar() == '-') {
            Scene.zoomCamera(-1);
        }
        
        if (Scene.SELECTED_TOOL == Scene.CAMERA_TOOL) {
            if (evt.getKeyChar() == 'x') {
                Scene.ORIGIN_X = 10;
                Scene.ORIGIN_Y = 10;
                Scene.ZOOM = 8;
            } else if (evt.getKeyChar() == 'c') {
                Scene.ORIGIN_X = 10;
                Scene.ORIGIN_Y = 10;
            }
        } else if (Scene.SELECTED_TOOL == Scene.MOVE_TOOL) {
            if (Scene.SELECTED_OBJECT != null) {
                if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
                    Scene.SELECTED_OBJECT.move(1, 0);
                }
                if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
                    Scene.SELECTED_OBJECT.move(-1, 0);
                }
                if (evt.getKeyCode() == KeyEvent.VK_UP) {
                    Scene.SELECTED_OBJECT.move(0, -1);
                }
                if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                    Scene.SELECTED_OBJECT.move(0, 1);
                }
            }
        } else if (Scene.SELECTED_TOOL == Scene.RESIZE_TOOL) {
            if (Scene.SELECTED_OBJECT != null) {
                if (Scene.SELECTED_OBJECT.TEXTURE_NAME.length() == 0) {
                    if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
                        Scene.SELECTED_OBJECT.resize(1, 0);
                    }
                    if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
                        Scene.SELECTED_OBJECT.resize(-1, 0);
                    }
                    if (evt.getKeyCode() == KeyEvent.VK_UP) {
                        Scene.SELECTED_OBJECT.resize(0, -1);
                    }
                    if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                        Scene.SELECTED_OBJECT.resize(0, 1);
                    }
                }
            }
        }
        sceneCanvas.repaint();
    }//GEN-LAST:event_sceneCanvasKeyPressed

    private void sceneCanvasMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sceneCanvasMouseMoved
        Scene.LAST_MOUSE_X = evt.getX();
        Scene.LAST_MOUSE_Y = evt.getY();
        sceneCanvas.repaint();
    }//GEN-LAST:event_sceneCanvasMouseMoved

    private void sceneCanvasMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sceneCanvasMouseDragged
        sceneCanvas.grabFocus();
        if (Scene.SELECTED_TOOL == Scene.CAMERA_TOOL) {
            Scene.moveCamera(evt.getX()-Scene.LAST_MOUSE_X, evt.getY()-Scene.LAST_MOUSE_Y);

        } else if (Scene.SELECTED_TOOL == Scene.MOVE_TOOL) {
            if (Scene.SELECTED_OBJECT == null) Scene.SELECTED_OBJECT = Scene.getObject(evt.getX(), evt.getY());
            refreshObjectProperties();
            if (Scene.SELECTED_OBJECT != null) {
                double move_x = (evt.getX()-Scene.LAST_MOUSE_X)/(double)Scene.ZOOM;
                double move_y = (evt.getY()-Scene.LAST_MOUSE_Y)/(double)Scene.ZOOM;
                Scene.SELECTED_OBJECT.move(move_x, move_y);
            } else {
                Scene.SELECTED_OBJECT = Scene.getObject(evt.getX(), evt.getY());
            }
        } else if (Scene.SELECTED_TOOL == Scene.RESIZE_TOOL) {
            if (Scene.SELECTED_OBJECT != null) {
                if (Scene.SELECTED_OBJECT.isHitbox()) {
                    double move_x = (evt.getX()-Scene.LAST_MOUSE_X)/(double)Scene.ZOOM;
                    double move_y = (evt.getY()-Scene.LAST_MOUSE_Y)/(double)Scene.ZOOM;
                    Scene.SELECTED_OBJECT.resize(move_x, move_y);
                }
            } else {
                double move_x = (evt.getX()-Scene.LAST_MOUSE_X)/(double)Scene.ZOOM;
                double move_y = (evt.getY()-Scene.LAST_MOUSE_Y)/(double)Scene.ZOOM;
                Scene.resizeLevel(move_x, move_y);
            }
        }
        sceneCanvas.repaint();            
        Scene.LAST_MOUSE_X = evt.getX();
        Scene.LAST_MOUSE_Y = evt.getY();
    }//GEN-LAST:event_sceneCanvasMouseDragged

    private void sceneCanvasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sceneCanvasMouseReleased

    }//GEN-LAST:event_sceneCanvasMouseReleased

    private void sceneCanvasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sceneCanvasMouseClicked
        Scene.SELECTED_OBJECT = Scene.getObject(evt.getX(), evt.getY());
        refreshObjectProperties();
        sceneCanvas.repaint();
        sceneCanvas.grabFocus();
    }//GEN-LAST:event_sceneCanvasMouseClicked

    private void sceneCanvasMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_sceneCanvasMouseWheelMoved
        Scene.zoomCamera(-evt.getWheelRotation());
        sceneCanvas.repaint();
        sceneCanvas.grabFocus();
    }//GEN-LAST:event_sceneCanvasMouseWheelMoved

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus

    }//GEN-LAST:event_formWindowGainedFocus

    private void spawnGeneralButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spawnGeneralButtonActionPerformed
        SceneObject o = new SceneObject();
        o.setHitbox(true);
        o.NAME = "object"+Math.abs(new Random().nextInt());
        o.setWorldX((int)((sceneCanvas.getWidth()/2)-Scene.ORIGIN_X)/Scene.ZOOM);
        o.setWorldY((int)((sceneCanvas.getHeight()/2)-Scene.ORIGIN_Y)/Scene.ZOOM);
        o.setWidth(16);
        o.setHeight(16);
        Scene.addToScene(o);
        Scene.SELECTED_OBJECT = o;
        sceneCanvas.repaint();
        System.out.println("Spawning "+o.TEXTURE_NAME);
    }//GEN-LAST:event_spawnGeneralButtonActionPerformed

    private void objectCloneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectCloneButtonActionPerformed
        if (Scene.SELECTED_OBJECT != null) {
            SceneObject o = Scene.SELECTED_OBJECT.copy();
            Scene.addToScene(o);
            sceneCanvas.repaint();
            System.out.println("Spawning "+o.TEXTURE_NAME);
        }
    }//GEN-LAST:event_objectCloneButtonActionPerformed

    private void camPosFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_camPosFieldFocusLost
        String s = camPosField.getText();
        ArrayList<Integer> values = Scene.parseIntegers(s, true);
        Scene.CURRENT_LEVEL.CAM_COORD[0] = values.get(0);Scene.CURRENT_LEVEL.CAM_COORD[1] = values.get(1);
        sceneCanvas.repaint();
    }//GEN-LAST:event_camPosFieldFocusLost

    private void camPosFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camPosFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_camPosFieldActionPerformed

    private void sendBackwardsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBackwardsButtonActionPerformed
        if (Scene.SELECTED_OBJECT != null) {
            Scene.moveBackward(Scene.SELECTED_OBJECT);
            sceneCanvas.repaint();
        }
    }//GEN-LAST:event_sendBackwardsButtonActionPerformed

    private void bringForwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bringForwardButtonActionPerformed
        if (Scene.SELECTED_OBJECT != null) {
            Scene.moveForward(Scene.SELECTED_OBJECT);
            sceneCanvas.repaint();
        }
    }//GEN-LAST:event_bringForwardButtonActionPerformed

    private void resizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeButtonActionPerformed
        Scene.SELECTED_TOOL = Scene.RESIZE_TOOL;
        selectButton.setEnabled(true);
        moveButton.setEnabled(true);
        cameraButton.setEnabled(true);
        resizeButton.setEnabled(false);
        sceneCanvas.repaint();
        sceneCanvas.grabFocus();
    }//GEN-LAST:event_resizeButtonActionPerformed

    private void levelSpawnFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_levelSpawnFieldFocusLost
        String s = levelSpawnField.getText();
        ArrayList<Integer> values = Scene.parseIntegers(s, true);
        Scene.CURRENT_LEVEL.SPAWN_COORD[0] = values.get(0);Scene.CURRENT_LEVEL.SPAWN_COORD[1] = values.get(1);
        sceneCanvas.repaint();
    }//GEN-LAST:event_levelSpawnFieldFocusLost

    private void cameraButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cameraButtonActionPerformed
        Scene.SELECTED_TOOL = Scene.CAMERA_TOOL;
        cameraButton.setEnabled(false);
        selectButton.setEnabled(true);
        moveButton.setEnabled(true);
        resizeButton.setEnabled(true);
        sceneCanvas.repaint();
        sceneCanvas.grabFocus();
    }//GEN-LAST:event_cameraButtonActionPerformed

    private void moveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveButtonActionPerformed
        Scene.SELECTED_TOOL = Scene.MOVE_TOOL;
        moveButton.setEnabled(false);
        selectButton.setEnabled(true);
        cameraButton.setEnabled(true);
        resizeButton.setEnabled(true);
        sceneCanvas.repaint();
        sceneCanvas.grabFocus();
    }//GEN-LAST:event_moveButtonActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        Scene.SELECTED_TOOL = Scene.SELECT_TOOL;
        selectButton.setEnabled(false);
        moveButton.setEnabled(true);
        cameraButton.setEnabled(true);
        resizeButton.setEnabled(true);
        sceneCanvas.repaint();
        sceneCanvas.grabFocus();
    }//GEN-LAST:event_selectButtonActionPerformed

    private void spawnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spawnButtonActionPerformed
        if (galleryListSidebar.getSelectedIndices().length > 0) {
            SceneObject o;
            int i = galleryListSidebar.getSelectedIndex()+1;
            o = Scene.OBJECT_GALLERY.get(i).copy();
            o.CLASS = Scene.OBJECT_GALLERY.get(i).CLASS;
            o.NAME = galleryListSidebar.getSelectedValue().toString()+Math.abs(new Random().nextInt());
            o.setWorldX((int)((sceneCanvas.getWidth()/2)-Scene.ORIGIN_X)/Scene.ZOOM);
            o.setWorldY((int)((sceneCanvas.getHeight()/2)-Scene.ORIGIN_Y)/Scene.ZOOM);
            i = Scene.OBJECT_TEXTURE_NAMES.indexOf(o.TEXTURE_NAME);
            if (i > -1) {
                o.setWidth(Scene.OBJECT_TEXTURES.get(i).getWidth());
                o.setHeight(Scene.OBJECT_TEXTURES.get(i).getHeight());
            } else {
                o.setWidth(8);
                o.setHeight(8);
            }
            Scene.addToScene(o);
            System.out.println("Spawning "+o.TEXTURE_NAME);
        }
        sceneCanvas.repaint();
        sceneCanvas.grabFocus();
    }//GEN-LAST:event_spawnButtonActionPerformed

    private void galleryListSidebarValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_galleryListSidebarValueChanged
        if (galleryListSidebar.getSelectedIndices().length == 0) {
            spawnButton.setEnabled(false);
        } else {
            spawnButton.setEnabled(true);
        }
    }//GEN-LAST:event_galleryListSidebarValueChanged

    private void objectTypeChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectTypeChooserActionPerformed
        if (Scene.SELECTED_OBJECT != null) {
            Scene.SELECTED_OBJECT.LAYER = objectTypeChooser.getSelectedIndex();
            Scene.moveToLayer(Scene.SELECTED_OBJECT.LAYER, Scene.SELECTED_OBJECT);
            sceneCanvas.repaint();
        }
    }//GEN-LAST:event_objectTypeChooserActionPerformed

    private void viewAdvancedObjectOptionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAdvancedObjectOptionsButtonActionPerformed
        Scene.ACTIVE_EDIT_OBJECT = Scene.SELECTED_OBJECT;
        GUI.refreshObjectEditor();
        objectEditorTabs.setSelectedIndex(0);
        showDialog(objectEditorDialog);
    }//GEN-LAST:event_viewAdvancedObjectOptionsButtonActionPerformed

    private void sceneCanvasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sceneCanvasKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_sceneCanvasKeyReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        saveDialogContextLabel.setToolTipText("quit");
        showDialog(saveConfirmDialog);
    }//GEN-LAST:event_formWindowClosing

    private void yesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesButtonActionPerformed
        hideDialog(saveConfirmDialog);
        Scene.saveProject(false);
        if (saveDialogContextLabel.getToolTipText().equals("quit")) {
            System.exit(0);
        } else if (saveDialogContextLabel.getToolTipText().equals("new")) {
            Scene.newProject();
        } else if (saveDialogContextLabel.getToolTipText().equals("open")) {
            String project = (String)projectList.getSelectedValue();
            Scene.loadProject((String)projectList.getSelectedValue());
            sceneCanvas.repaint();
        }
    }//GEN-LAST:event_yesButtonActionPerformed

    private void noButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noButtonActionPerformed
        hideDialog(saveConfirmDialog);
        if (saveDialogContextLabel.getToolTipText().equals("quit")) {
            System.exit(0);
        } else if (saveDialogContextLabel.getToolTipText().equals("new")) {
            Scene.newProject();
        } else if (saveDialogContextLabel.getToolTipText().equals("open")) {
            String project = (String)projectList.getSelectedValue();
            Scene.loadProject((String)projectList.getSelectedValue());
            sceneCanvas.repaint();
        }
    }//GEN-LAST:event_noButtonActionPerformed

    private void downloadUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadUpdateButtonActionPerformed
        
    }//GEN-LAST:event_downloadUpdateButtonActionPerformed

    private void downloadUpdateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadUpdateButtonMouseClicked
        try {
            Desktop.getDesktop().browse(new URL("http://computerology.bitbucket.org/tools/editor/index.html").toURI());
        } catch (URISyntaxException ex) {
            //Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            //Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            //Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_downloadUpdateButtonMouseClicked

    private void resultsCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultsCloseButtonActionPerformed
        hideDialog(testOutputDialog);
    }//GEN-LAST:event_resultsCloseButtonActionPerformed

    private void testOutputDialogFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_testOutputDialogFocusLost

    }//GEN-LAST:event_testOutputDialogFocusLost

    private void runProjectAtLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runProjectAtLevelButtonActionPerformed
        runProject(Scene.CURRENT_LEVEL.NAME);
        levelMenu.setVisible(true);
    }//GEN-LAST:event_runProjectAtLevelButtonActionPerformed

    private void projectListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_projectListValueChanged
        String selected = ((String)projectList.getSelectedValue());
        System.out.println(selected);
        if (selected != null) {
            projectNameField.setText(selected);
        }
        projectNameField.setEnabled(selected != null);
        editProjectButton.setEnabled(selected != null);
        deleteProjectButton.setEnabled(selected != null);
        renameProjectButton.setEnabled(selected != null);
    }//GEN-LAST:event_projectListValueChanged

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        refreshProjectListings();
        showDialog(projectManagerDialog);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        if (!Scene.doesProjectExist(Scene.PROJECT_NAME)) {
            Scene.createProjectDirs(Scene.PROJECT_NAME);
        }
        Scene.saveProject(true);
        updateWindowTitle();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        saveDialogContextLabel.setToolTipText("new");
        showDialog(saveConfirmDialog);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void editProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editProjectButtonActionPerformed
        String project = (String)projectList.getSelectedValue();
        if (project.equals(Scene.PROJECT_NAME)) {
            GUI.showMessage("Project '"+project+"' is the current project!", projectManagerDialog);
            return;
        }
        saveDialogContextLabel.setToolTipText("open");
        hideDialog(projectManagerDialog);
        showDialog(saveConfirmDialog);
    }//GEN-LAST:event_editProjectButtonActionPerformed

    private void deleteProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProjectButtonActionPerformed
        int index = projectList.getSelectedIndex();
        String project = (String)projectList.getSelectedValue();
        if (project.equals(Scene.PROJECT_NAME)) {
            GUI.showMessage("Project '"+project+"' is the current project and cannot be deleted.", 
                    projectManagerDialog);
            return;
        }
        Scene.deleteDirectory(new File(Scene.USER_HOME+"/level_editor/projects/"+project));
        GUI.refreshProjectListings();
        projectList.setSelectedIndex(index);
        if (projectList.getSelectedIndex() > projectList.getMaxSelectionIndex()) {
            projectList.setSelectedIndex(projectList.getMaxSelectionIndex());
        } else if (projectList.getSelectedIndex() < projectList.getMinSelectionIndex()) {
            projectList.setSelectedIndex(0);
        }
    }//GEN-LAST:event_deleteProjectButtonActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        Level l = new Level();
        l.NAME = "new_level"+(Math.abs(new Random().nextInt()));
        Scene.addLevel(l);
        Scene.switchToLevel(l.NAME);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void levelListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_levelListValueChanged
        String selected = ((String)levelList.getSelectedValue());
        System.out.println(selected);
        if (selected != null) {
            levelNameField.setText(selected);
        }
        levelNameField.setEnabled(selected != null);
        editLevelButton.setEnabled(selected != null);
        deleteLevelButton.setEnabled(selected != null);
        renameLevelButton.setEnabled(selected != null);
    }//GEN-LAST:event_levelListValueChanged

    private void deleteLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLevelButtonActionPerformed
        String selected = ((String)levelList.getSelectedValue());
        int index = levelList.getSelectedIndex();
        if (selected.equals(Scene.CURRENT_LEVEL.NAME)) {
            //JOptionPane.showMessageDialog(levelManagerDialog, "This level is being edited and cannot be deleted.");
            GUI.showMessage("This level is being edited and cannot be deleted.", levelManagerDialog);
            return;
        }
        Scene.deleteLevel(selected);
        GUI.refreshLevelListings();
        levelList.setSelectedIndex(index);
        if (levelList.getSelectedIndex() > levelList.getMaxSelectionIndex()) {
            levelList.setSelectedIndex(levelList.getMaxSelectionIndex());
        } else if (levelList.getSelectedIndex() < levelList.getMinSelectionIndex()) {
            levelList.setSelectedIndex(0);
        }
    }//GEN-LAST:event_deleteLevelButtonActionPerformed

    private void editLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLevelButtonActionPerformed
        String selected = ((String)levelList.getSelectedValue());
        if (selected.equals(Scene.CURRENT_LEVEL.NAME)) {
            GUI.showMessage("You are already editing this level!", levelManagerDialog);
            return;
        }
        Scene.switchToLevel(selected);
        sceneCanvas.repaint();
        hideDialog(levelManagerDialog);
        GUI.updateWindowTitle();
    }//GEN-LAST:event_editLevelButtonActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        showDialog(levelManagerDialog);
        GUI.refreshLevelListings();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void levelNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_levelNameFieldKeyReleased
        
    }//GEN-LAST:event_levelNameFieldKeyReleased

    private void levelNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_levelNameFieldKeyPressed
        
    }//GEN-LAST:event_levelNameFieldKeyPressed

    private void projectNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_projectNameFieldKeyReleased

    }//GEN-LAST:event_projectNameFieldKeyReleased

    private void renameProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameProjectButtonActionPerformed
        int index = projectList.getSelectedIndex();
        String value = (String)projectList.getSelectedValue();
        File old = new File(Scene.USER_HOME+"/level_editor/projects/"+value);
        boolean is_active = Scene.PROJECT_NAME.equals(value);
        //if (!Scene.scriptExists(scriptNameField.getText())) {
        //    scr.NAME = scriptNameField.getText();
        //} else {
        if (!old.exists()) { return; }
        if (value.equals(projectNameField.getText()) == false) {
            //JOptionPane.showMessageDialog(null, "An animation by that name already exists in this level!\nPlease choose a different name.");
            if (projectNameField.getText().length() != 0) { 
                if (old.renameTo(
                        new File(Scene.USER_HOME+"/level_editor/projects/"+projectNameField.getText()))) {
                    GUI.refreshProjectListings();
                    if (is_active) Scene.PROJECT_NAME = projectNameField.getText();
                    GUI.updateWindowTitle();
                } else {
                    GUI.showMessage("Failed to rename project!\nMake sure you do not have multiple projects\nof the same name.", 
                            projectManagerDialog);
                }
            } else {
                GUI.showMessage("Project name cannot be empty!", 
                        projectManagerDialog);
            }
        }
        GUI.updateWindowTitle();
    }//GEN-LAST:event_renameProjectButtonActionPerformed

    private void renameLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameLevelButtonActionPerformed
        int index = levelList.getSelectedIndex();
        ArrayList<Level> list = Scene.LEVELS;
        Level l = list.get(index);

        if (l.NAME.equals(levelNameField.getText()) == false) {
            for (Level l2: Scene.LEVELS) { if (l2.NAME.equals(levelNameField.getText())) { 
                GUI.showMessage("A level already exists by that name!", levelManagerDialog); return; } }
            l.NAME = levelNameField.getText();
            GUI.refreshLevelListings();
            levelList.setSelectedIndex(index);
            levelNameField.grabFocus();
            GUI.updateWindowTitle();
        }

    }//GEN-LAST:event_renameLevelButtonActionPerformed

    private void galleryListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_galleryListValueChanged
        int index = galleryList.getSelectedIndex();
        duplicateGalleryObjectButton.setEnabled(index > -1);
        deleteGalleryObjectButton.setEnabled(index > -1);
        editGalleryObjectButton.setEnabled(index > -1);
        if (index > -1) {
            String type = galleryList.getSelectedValue().toString();
            int in_level = 0;
            int in_project = 0;
            for (Level l: Scene.LEVELS) {
                for (SceneObject o: l.ALL_OBJECTS) {
                    if (o.CLASS.equals(type)) {
                        if (l.equals(Scene.CURRENT_LEVEL)) in_level++;
                        in_project++;
                    }
                }
            }
            inCurrentLevelLabel.setText(in_level+" in current level");
            inCurrentProjectLabel.setText(in_project+" project-wide");
            if (index == 0) {
                deleteGalleryObjectButton.setEnabled(false);
                inCurrentLevelLabel.setText("Use this to edit the");
                inCurrentProjectLabel.setText("player's properties.");
            }
        } else {
            inCurrentLevelLabel.setText("N/A in current level");
            inCurrentProjectLabel.setText("N/A project-wide");
        }
    }//GEN-LAST:event_galleryListValueChanged

    private void editGalleryObjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGalleryObjectButtonActionPerformed
        SceneObject o = Scene.OBJECT_GALLERY.get(galleryList.getSelectedIndex());
        Scene.ACTIVE_EDIT_OBJECT = o;
        GUI.refreshObjectEditor();
        GUI.refreshGalleryListings();
        hideDialog(objectGalleryDialog);
        showDialog(objectEditorDialog);
    }//GEN-LAST:event_editGalleryObjectButtonActionPerformed

    private void newGalleryObjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGalleryObjectButtonActionPerformed
        SceneObject o = new SceneObject();
        o.CLASS = "object"+(Math.abs(new Random().nextInt()));
        Scene.addGalleryObject(o);
        Scene.ACTIVE_EDIT_OBJECT = o;
        GUI.refreshObjectEditor();
        GUI.refreshGalleryListings();
        hideDialog(objectGalleryDialog);
        showDialog(objectEditorDialog);
    }//GEN-LAST:event_newGalleryObjectButtonActionPerformed

    private void deleteGalleryObjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGalleryObjectButtonActionPerformed
        int index = galleryList.getSelectedIndex();
        String type = Scene.OBJECT_GALLERY.get(index).CLASS;
        for (SceneObject o: Scene.getObjectsByType(type)) {
            Scene.removeObject(o);
        }
        Scene.OBJECT_GALLERY.remove(index);
        GUI.refreshGalleryListings();
        sceneCanvas.repaint();
    }//GEN-LAST:event_deleteGalleryObjectButtonActionPerformed

    private void duplicateGalleryObjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicateGalleryObjectButtonActionPerformed
        int index = galleryList.getSelectedIndex();
        SceneObject o = Scene.OBJECT_GALLERY.get(index);
        SceneObject o2 = o.copy();
        Scene.addGalleryObject(o2);
        o2.CLASS+=""+Math.abs(new Random().nextInt() / 10000);
        GUI.refreshGalleryListings();
    }//GEN-LAST:event_duplicateGalleryObjectButtonActionPerformed

    private void objectGalleryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectGalleryButtonActionPerformed
        showDialog(objectGalleryDialog);
        GUI.refreshGalleryListings();
    }//GEN-LAST:event_objectGalleryButtonActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        File folder = new File(System.clearProperty("user.home")+"/level_editor/");
        try {
            if (folder.exists()) Desktop.getDesktop().open(folder);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (Scene.doesProjectExist(Scene.PROJECT_NAME)) {
            Scene.loadAssets();
            JOptionPane.showMessageDialog(null, 
                    Scene.OBJECT_TEXTURES.size()+" object textures loaded!\n"
                    +Scene.ANIMATION_TEXTURES.size()+" animation sprites loaded!\n");
        } else {
            JOptionPane.showMessageDialog(null, "You must save your project first!");
        }
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        File folder = new File(System.clearProperty("user.home")+"/level_editor/projects/"+Scene.PROJECT_NAME+"/assets/");
        try {
            if (folder.exists()) Desktop.getDesktop().open(folder); else JOptionPane.showMessageDialog(null, "You must save your project first!");
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void genericDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_genericDialogWindowClosing
        if (!(evt.getComponent() instanceof JDialog)) return;
        hideDialog((JDialog)evt.getComponent());
    }//GEN-LAST:event_genericDialogWindowClosing

    private void projectManagerDialogWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_projectManagerDialogWindowOpened
        GUI.refreshProjectListings();
    }//GEN-LAST:event_projectManagerDialogWindowOpened

    private void levelManagerDialogWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_levelManagerDialogWindowOpened
        GUI.refreshLevelListings();
    }//GEN-LAST:event_levelManagerDialogWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        GUI.refreshLevelEditor();
        levelEditorTabs.setSelectedIndex(0);
        showDialog(levelEditorDialog);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void scanForErrorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanForErrorsButtonActionPerformed
        /**SCAN FOR ERRORS OF ALL KINDS AND DISPLAY THEM IN THE TEXTFIELD**/
        String results = "";
        for (Level l: Scene.LEVELS) {
            String level_errors = "";
            for (SceneObject o: l.ALL_OBJECTS) {
                String object_errors = "";
                for (String s: o.getErrors()) object_errors+=s;
                if (object_errors.length() > 0) {
                    if (o.isHitbox()) level_errors+= "    Object: "+o.NAME+" [hitbox]:\n"+object_errors;
                        else level_errors+= "    Object: "+o.NAME+" ["+o.CLASS+"]:\n"+object_errors;;
                }
            }
            if (level_errors.length() > 0) results+="Level: "+l.NAME+"\n"+level_errors;
        }
        if (results.length() == 0) results = "No errors found!";
        errorScanResults.setText(results);
        GUI.showMessage("This feature is incomplete.\nIt will tell you a few things, but not everything.\nDon't rely on it"
                + " too much just yet.", errorCheckerDialog);
    }//GEN-LAST:event_scanForErrorsButtonActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
      
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        showDialog(errorCheckerDialog);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void levelZoomSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_levelZoomSliderMouseReleased
        Scene.CURRENT_LEVEL.ZOOM = levelZoomSlider.getValue();
    }//GEN-LAST:event_levelZoomSliderMouseReleased

    private void runProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runProjectButtonActionPerformed
        GUI.runProject(Scene.LEVELS.get(0).NAME);
    }//GEN-LAST:event_runProjectButtonActionPerformed

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
        
    }//GEN-LAST:event_jMenu4ActionPerformed

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        showDialog(helpDialog);
    }//GEN-LAST:event_jMenu4MouseClicked

    private void ambientSoundVolumeSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ambientSoundVolumeSliderMouseDragged
        Scene.CURRENT_LEVEL.AMBIENT_VOLUME = ambientSoundVolumeSlider.getValue();
    }//GEN-LAST:event_ambientSoundVolumeSliderMouseDragged

    private void ambientSoundVolumeSliderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ambientSoundVolumeSliderMouseClicked
        Scene.CURRENT_LEVEL.AMBIENT_VOLUME = ambientSoundVolumeSlider.getValue();
    }//GEN-LAST:event_ambientSoundVolumeSliderMouseClicked

    private void backgroundMusicVolumeSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundMusicVolumeSliderMouseDragged
        Scene.CURRENT_LEVEL.MUSIC_VOLUME = backgroundMusicVolumeSlider.getValue();
    }//GEN-LAST:event_backgroundMusicVolumeSliderMouseDragged

    private void backgroundMusicVolumeSliderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundMusicVolumeSliderMouseClicked
        Scene.CURRENT_LEVEL.MUSIC_VOLUME = backgroundMusicVolumeSlider.getValue();
    }//GEN-LAST:event_backgroundMusicVolumeSliderMouseClicked

    private void ambientSoundFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ambientSoundFieldKeyReleased
        if (new File(Scene.USER_HOME+"/level_editor/"+Scene.PROJECT_NAME+"/assets/audio/"+ambientSoundField.getText()+".ogg")
            .exists() == false) {
            ambientSoundField.setForeground(Color.red);
            return;
        }

        if (evt.getKeyChar() == '\n') {
            Scene.CURRENT_LEVEL.AMBIENT_SOUND = ambientSoundField.getText();
            ambientSoundField.setForeground(Color.black);
        }
        if (Scene.CURRENT_LEVEL.AMBIENT_SOUND.equals(ambientSoundField.getText()) == false) ambientSoundField.setForeground(Color.blue);
    }//GEN-LAST:event_ambientSoundFieldKeyReleased

    private void autoAmbientSoundCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoAmbientSoundCheckboxActionPerformed
        Scene.CURRENT_LEVEL.PLAY_AMBIENT_SOUND_AUTOMATICALLY = autoAmbientSoundCheckbox.isSelected();
    }//GEN-LAST:event_autoAmbientSoundCheckboxActionPerformed

    private void loopAmbientSoundCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopAmbientSoundCheckboxActionPerformed
        Scene.CURRENT_LEVEL.LOOP_AMBIENT_SOUND = loopAmbientSoundCheckbox.isSelected();
    }//GEN-LAST:event_loopAmbientSoundCheckboxActionPerformed

    private void autoBackgroundMusicCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoBackgroundMusicCheckboxActionPerformed
        Scene.CURRENT_LEVEL.PLAY_BG_MUSIC_AUTOMATICALLY = autoBackgroundMusicCheckbox.isSelected();
    }//GEN-LAST:event_autoBackgroundMusicCheckboxActionPerformed

    private void loopBackgroundMusicCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopBackgroundMusicCheckboxActionPerformed
        Scene.CURRENT_LEVEL.LOOP_BG_MUSIC = loopBackgroundMusicCheckbox.isSelected();
    }//GEN-LAST:event_loopBackgroundMusicCheckboxActionPerformed

    private void backgroundMusicFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_backgroundMusicFieldKeyReleased
        if (new File(Scene.USER_HOME+"/level_editor/"+Scene.PROJECT_NAME+"/assets/audio/"+backgroundMusicField.getText()+".ogg")
            .exists() == false) {
            backgroundMusicField.setForeground(Color.red);
            return;
        }

        if (evt.getKeyChar() == '\n') {
            Scene.CURRENT_LEVEL.BG_MUSIC = backgroundMusicField.getText();
            backgroundMusicField.setForeground(Color.black);
        }
        if (Scene.CURRENT_LEVEL.BG_MUSIC.equals(backgroundMusicField.getText()) == false) backgroundMusicField.setForeground(Color.blue);
    }//GEN-LAST:event_backgroundMusicFieldKeyReleased

    private void ambientColorLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ambientColorLabelMouseClicked
        Color bg = ambientColorLabel.getBackground();
        levelColorPicker.setColor(bg);
    }//GEN-LAST:event_ambientColorLabelMouseClicked

    private void bottomBackgroundColorLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bottomBackgroundColorLabelMouseClicked
        Color bg = bottomBackgroundColorLabel.getBackground();
        levelColorPicker.setColor(bg);
    }//GEN-LAST:event_bottomBackgroundColorLabelMouseClicked

    private void topBackgroundColorLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topBackgroundColorLabelMouseClicked
        Color bg = topBackgroundColorLabel.getBackground();
        levelColorPicker.setColor(bg);
    }//GEN-LAST:event_topBackgroundColorLabelMouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Color c = levelColorPicker.getColor();
        Scene.CURRENT_LEVEL.R3 = c.getRed();
        Scene.CURRENT_LEVEL.G3 = c.getGreen();
        Scene.CURRENT_LEVEL.B3 = c.getBlue();
        ambientColorLabel.setBackground(c);
        sceneCanvas.repaint();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Color c = levelColorPicker.getColor();
        Scene.CURRENT_LEVEL.R2 = c.getRed();
        Scene.CURRENT_LEVEL.G2 = c.getGreen();
        Scene.CURRENT_LEVEL.B2 = c.getBlue();
        bottomBackgroundColorLabel.setBackground(c);
        sceneCanvas.repaint();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Color c = levelColorPicker.getColor();
        Scene.CURRENT_LEVEL.R1 = c.getRed();
        Scene.CURRENT_LEVEL.G1 = c.getGreen();
        Scene.CURRENT_LEVEL.B1 = c.getBlue();
        topBackgroundColorLabel.setBackground(c);
        sceneCanvas.repaint();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void ambientIntensitySliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ambientIntensitySliderMouseDragged
        Scene.CURRENT_LEVEL.AMBIENT_INTENSITY = ambientIntensitySlider.getValue();
        sceneCanvas.repaint();
    }//GEN-LAST:event_ambientIntensitySliderMouseDragged

    private void ambientIntensitySliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ambientIntensitySliderMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_ambientIntensitySliderMouseReleased

    private void ambientIntensitySliderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ambientIntensitySliderMouseClicked
        Scene.CURRENT_LEVEL.AMBIENT_INTENSITY = ambientIntensitySlider.getValue();
        sceneCanvas.repaint();
    }//GEN-LAST:event_ambientIntensitySliderMouseClicked

    private void levelColorPickerVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_levelColorPickerVetoableChange

    }//GEN-LAST:event_levelColorPickerVetoableChange

    private void levelColorPickerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_levelColorPickerPropertyChange

    }//GEN-LAST:event_levelColorPickerPropertyChange

    private void levelColorPickerMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_levelColorPickerMouseReleased
        Color c = levelColorPicker.getColor();
        Scene.CURRENT_LEVEL.R1 = c.getRed();
        Scene.CURRENT_LEVEL.G1 = c.getGreen();
        Scene.CURRENT_LEVEL.B1 = c.getBlue();
        sceneCanvas.repaint();

    }//GEN-LAST:event_levelColorPickerMouseReleased

    private void levelColorPickerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_levelColorPickerMouseClicked
        System.out.println("Hello! ");
    }//GEN-LAST:event_levelColorPickerMouseClicked

    private void sceneCanvasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sceneCanvasMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_sceneCanvasMousePressed

    private void objectEditorDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_objectEditorDialogWindowClosing
        hideDialog(objectEditorDialog);
        if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
            showDialog(objectGalleryDialog);
        }
    }//GEN-LAST:event_objectEditorDialogWindowClosing

    private void toggleAnimationPreviewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleAnimationPreviewButtonActionPerformed
        Scene.PREVIEW_THREAD.setPaused(!toggleAnimationPreviewButton.isSelected());
    }//GEN-LAST:event_toggleAnimationPreviewButtonActionPerformed

    private void animationPreviewZoomChooserStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_animationPreviewZoomChooserStateChanged
        int zoom = ((Integer)animationPreviewZoomChooser.getValue());
        if (zoom < 1) {
            zoom = 1;
            animationPreviewZoomChooser.setValue(zoom);
        }
        if (zoom > 10) {
            zoom = 10;
            animationPreviewZoomChooser.setValue(zoom);
        }
        Animation anim = Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(animationChooser.getSelectedIndex());
        GUI.refreshAnimationFramePreview(anim, animationFrameChooser.getSelectedIndex());
    }//GEN-LAST:event_animationPreviewZoomChooserStateChanged

    private void deleteAnimationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAnimationButtonActionPerformed
        int index = animationChooser.getSelectedIndex();
        Animation anim = Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(index);
        if (anim != null) {
            if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
                /*REMOVE THIS ANIMATION FROM ALL INSTANCES OF THE EDITED OBJECT*/
                if (Scene.ACTIVE_EDIT_OBJECT.CLASS.isEmpty()) return;
                for (SceneObject o: Scene.getObjectsByType(Scene.ACTIVE_EDIT_OBJECT.CLASS)) {
                    for (Animation s: o.ANIMATIONS) {
                        if (s.equalTo(anim)) {
                            o.ANIMATIONS.remove(s);
                            break;
                        }
                    }
                }
            }
            Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.remove(anim);
            fillAnimationChooser();
            if (index < Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.size()) {
                animationChooser.setSelectedIndex(index);
            } else {
                animationChooser.setSelectedIndex(Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.size()-1);
            }
        }
    }//GEN-LAST:event_deleteAnimationButtonActionPerformed

    private void duplicateAnimationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicateAnimationButtonActionPerformed
        int index = animationChooser.getSelectedIndex();
        Animation anim = new Animation();
        Animation existing = Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(index);
        existing.copyTo(anim);
        anim.NAME+=Math.abs(new Random().nextInt() % 1000);
        Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.add(anim);
        if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
            /*ADD THIS ANIMATION TO ALL INSTANCES OF THE EDITED OBJECT*/
            if (Scene.ACTIVE_EDIT_OBJECT.CLASS.isEmpty()) return;
            for (SceneObject o: Scene.getObjectsByType(Scene.ACTIVE_EDIT_OBJECT.CLASS)) {
                boolean add = true;
                for (Animation s: o.ANIMATIONS) {
                    if (s.NAME.equals(anim.NAME)) {
                        add = false;
                    }
                }
                Animation s = new Animation();
                anim.copyTo(s);
                if (add) o.ANIMATIONS.add(s);
            }
        }
        fillAnimationChooser();
        animationChooser.setSelectedIndex(Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.size()-1);
    }//GEN-LAST:event_duplicateAnimationButtonActionPerformed

    private void newAnimationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAnimationButtonActionPerformed
        Animation anim = new Animation();
        anim.NAME = "animation"+Math.abs(new Random().nextInt());
        Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.add(anim);
        
        if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
            /*ADD THIS ANIMATION TO ALL INSTANCES OF THE EDITED OBJECT*/
            if (Scene.ACTIVE_EDIT_OBJECT.CLASS.isEmpty()) return;
            for (SceneObject o: Scene.getObjectsByType(Scene.ACTIVE_EDIT_OBJECT.CLASS)) {
                boolean add = true;
                for (Animation s: o.ANIMATIONS) {
                    if (s.NAME.equals(anim.NAME)) {
                        add = false;
                    }
                }
                Animation s = new Animation();
                anim.copyTo(s);
                if (add) o.ANIMATIONS.add(s);
            }
        }
        fillAnimationChooser();
        animationChooser.setSelectedIndex(Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.size()-1);
    }//GEN-LAST:event_newAnimationButtonActionPerformed

    private void animationNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_animationNameFieldKeyReleased
        int index = animationChooser.getSelectedIndex();
        Animation anim = Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(index);
        if (Scene.ACTIVE_EDIT_OBJECT.animationExists(animationNameField.getText()) || animationNameField.getText().length() == 0) {
            animationNameField.setForeground(Color.red);
            return;
        }
        if (evt.getKeyChar() == '\n') {
            Animation compare_to = new Animation(); anim.copyTo(compare_to);
            anim.NAME = animationNameField.getText();
            Animation.refactorAll(anim, compare_to);
            fillAnimationChooser();
            animationNameField.grabFocus();
            animationNameField.setForeground(Color.black);
            animationChooser.setSelectedIndex(index);
        }
        if (!animationNameField.getText().equals(anim.NAME)) animationNameField.setForeground(Color.blue);
    }//GEN-LAST:event_animationNameFieldKeyReleased

    private void animationNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_animationNameFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_animationNameFieldKeyPressed

    private void animationChooserValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_animationChooserValueChanged
        animationNameField.setForeground(Color.black);
        if (animationChooser.getSelectedIndex() > -1) {
            GUI.fillAnimationFields();
            Scene.PREVIEW_THREAD.setAnimation(Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(animationChooser.getSelectedIndex()));
        } else {
            GUI.fillAnimationFields();
            framePreview.setIcon(null);
            deleteAnimationButton.setEnabled(false);
        }
        
    }//GEN-LAST:event_animationChooserValueChanged

    private void animationDeleteFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animationDeleteFrameButtonActionPerformed
        Animation anim = Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(animationChooser.getSelectedIndex());
        int index = animationFrameChooser.getSelectedIndex();
        Animation compare_to = new Animation(); anim.copyTo(compare_to);
        anim.removeFrame(index);
        Animation.refactorAll(anim, compare_to);
        fillAnimationFrameChooser();
        if (index >= anim.WIDTHS.size()) {
            animationFrameChooser.setSelectedIndex(anim.WIDTHS.size()-1);
        } else {
            animationFrameChooser.setSelectedIndex(index);
        }
    }//GEN-LAST:event_animationDeleteFrameButtonActionPerformed

    private void animationAddFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animationAddFrameButtonActionPerformed
        Animation anim = Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(animationChooser.getSelectedIndex());
        Animation compare_to = new Animation(); anim.copyTo(compare_to);
        anim.addFrame(16, 16, 100);
        Animation.refactorAll(anim, compare_to);
        fillAnimationFrameChooser();
        animationFrameChooser.setSelectedIndex(anim.WIDTHS.size()-1);

        ArrayList<String> frames = new ArrayList<String>();
        for (int i = 0; i != anim.WIDTHS.size(); i++) {
            frames.add("Frame #"+(i+1));
        }
        animationFrameChooser.setListData(frames.toArray());
        animationFrameChooser.setSelectedIndex(anim.WIDTHS.size()-1);
        Scene.PREVIEW_THREAD.setAnimation(anim);
    }//GEN-LAST:event_animationAddFrameButtonActionPerformed

    private void animationLoopCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animationLoopCheckboxActionPerformed
        Animation anim = Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(animationChooser.getSelectedIndex());

        Animation compare_to = new Animation(); anim.copyTo(compare_to);
        anim.LOOP = !anim.LOOP;
        Animation.refactorAll(anim, compare_to);
    }//GEN-LAST:event_animationLoopCheckboxActionPerformed

    private void animationFrameDurationFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_animationFrameDurationFieldKeyReleased
        Animation anim = Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(animationChooser.getSelectedIndex());
        int index = animationFrameChooser.getSelectedIndex();
        if (animationFrameDurationField.getText().length() == 0) return;
        animationFrameDurationField.setForeground(Color.blue);
        if (evt.getKeyChar() == '\n') {
            ArrayList<Integer> dure = Scene.parseIntegers(animationFrameDurationField.getText(), true);
            if (dure.size() != 420) {
                Animation compare_to = new Animation(); anim.copyTo(compare_to);
                anim.FRAME_DURATION = dure.get(0);
                Animation.refactorAll(anim, compare_to);
                animationFrameDurationField.setForeground(Color.black);
                Scene.PREVIEW_THREAD.setAnimation(anim);
            } else {
                animationFrameDurationField.setForeground(Color.red);
            }
        }
    }//GEN-LAST:event_animationFrameDurationFieldKeyReleased

    private void animationFrameDurationFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animationFrameDurationFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_animationFrameDurationFieldActionPerformed

    private void animationFrameDimensionsFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_animationFrameDimensionsFieldKeyReleased
        Animation anim = Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(animationChooser.getSelectedIndex());
        int index = animationFrameChooser.getSelectedIndex();
        if (animationFrameDimensionsField.getText().length() == 0) return;
        animationFrameDimensionsField.setForeground(Color.blue);
        if (evt.getKeyChar() == '\n') {
            ArrayList<Integer> dims = Scene.parseIntegers(animationFrameDimensionsField.getText(), false);
            if (dims.size() != 420) {
                Animation compare_to = new Animation(); anim.copyTo(compare_to);
                anim.WIDTHS.set(index, dims.get(0));
                anim.HEIGHTS.set(index, dims.get(1));
                Animation.refactorAll(anim, compare_to);
                animationFrameDimensionsField.setForeground(Color.black);
                Scene.PREVIEW_THREAD.setAnimation(anim);
            } else {
                animationFrameDimensionsField.setForeground(Color.red);
            }
        }
    }//GEN-LAST:event_animationFrameDimensionsFieldKeyReleased

    private void animationFrameDimensionsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animationFrameDimensionsFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_animationFrameDimensionsFieldActionPerformed

    private void animationFrameChooserValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_animationFrameChooserValueChanged

        int index = animationFrameChooser.getSelectedIndex();
        if (index > -1) {
            Animation anim = Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(animationChooser.getSelectedIndex());
            animationDeleteFrameButton.setEnabled(true);
            animationFrameDurationField.setText(anim.FRAME_DURATION+"");
            animationFrameDimensionsField.setText(anim.WIDTHS.get(index)+" "+anim.HEIGHTS.get(index));
        } else {
            animationDeleteFrameButton.setEnabled(false);
            framePreview.setIcon(null);
        }
    }//GEN-LAST:event_animationFrameChooserValueChanged

    private void animationImageFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_animationImageFieldKeyReleased
        Animation anim = Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(animationChooser.getSelectedIndex());

        if (new File(Scene.USER_HOME+"/level_editor/projects/"+Scene.PROJECT_NAME+"/assets/textures/animations/"+animationImageField.getText()+".png")
            .exists() == false) {
            animationImageField.setForeground(Color.red);
            return;
        }

        if (evt.getKeyChar() == '\n') {
            Animation compare_to = new Animation(); anim.copyTo(compare_to);
            anim.SPRITE_NAME = animationImageField.getText();
            Animation.refactorAll(anim, compare_to);
            animationImageField.setForeground(Color.black);
            Scene.PREVIEW_THREAD.setAnimation(anim);
        }
        if (anim.SPRITE_NAME.equals(animationImageField.getText()) == false) animationImageField.setForeground(Color.blue);
    }//GEN-LAST:event_animationImageFieldKeyReleased

    private void duplicateDialogueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicateDialogueButtonActionPerformed
        int index = dialogueChooser.getSelectedIndex();
        Dialogue anim = new Dialogue();
        Dialogue existing = Scene.ACTIVE_EDIT_OBJECT.DIALOGUES.get(index);
        existing.copyTo(anim);
        anim.NAME+=Math.abs(new Random().nextInt() % 10000);
        Scene.ACTIVE_EDIT_OBJECT.DIALOGUES.add(anim);
        ArrayList<String> anim_names = new ArrayList<String>();
        for (Dialogue s: Scene.ACTIVE_EDIT_OBJECT.DIALOGUES) {
            anim_names.add(s.NAME);
        }
        if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
            /*ADD THIS ANIMATION TO ALL INSTANCES OF THE EDITED OBJECT*/
            if (Scene.ACTIVE_EDIT_OBJECT.CLASS.isEmpty()) return;
            for (SceneObject o: Scene.getObjectsByType(Scene.ACTIVE_EDIT_OBJECT.CLASS)) {
                boolean add = true;
                for (Dialogue s: o.DIALOGUES) {
                    if (s.NAME.equals(anim.NAME)) {
                        add = false;
                    }
                }
                Dialogue s = new Dialogue();
                anim.copyTo(s);
                s.setParent(o);
                if (add) o.DIALOGUES.add(s);
            }
        }
        dialogueChooser.setListData(anim_names.toArray());
        dialogueChooser.setSelectedIndex(anim_names.size()-1);
    }//GEN-LAST:event_duplicateDialogueButtonActionPerformed

    private void choiceEventValueFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_choiceEventValueFieldKeyReleased

    }//GEN-LAST:event_choiceEventValueFieldKeyReleased

    private void deleteDialogueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDialogueButtonActionPerformed
        int index = dialogueChooser.getSelectedIndex();
        Dialogue dialogue = Scene.ACTIVE_EDIT_OBJECT.DIALOGUES.get(index);
        if (dialogue != null) {
            Scene.ACTIVE_EDIT_OBJECT.DIALOGUES.remove(dialogue);
            if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
                /*REMOVE THIS DIALOGUE FROM ALL INSTANCES OF THE EDITED OBJECT*/
                if (Scene.ACTIVE_EDIT_OBJECT.CLASS.isEmpty()) return;
                for (SceneObject o: Scene.getObjectsByType(Scene.ACTIVE_EDIT_OBJECT.CLASS)) {
                    for (Dialogue s: o.DIALOGUES) {
                        if (s.equalTo(dialogue)) {
                            o.DIALOGUES.remove(s);
                            break;
                        }
                    }
                }
            }
            ArrayList<String> d_names = new ArrayList<String>();
            for (Dialogue s: Scene.ACTIVE_EDIT_OBJECT.DIALOGUES) {
                d_names.add(s.NAME);
            }
            dialogueChooser.setListData(d_names.toArray());
            if (index < d_names.size()) {
                dialogueChooser.setSelectedIndex(index);
            } else {
                dialogueChooser.setSelectedIndex(d_names.size()-1);
            }
        }
    }//GEN-LAST:event_deleteDialogueButtonActionPerformed

    private void newDialogueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDialogueButtonActionPerformed
        Dialogue dialogue = new Dialogue();
        dialogue.NAME = "dialogue"+Math.abs(new Random().nextInt());
        dialogue.setParent(Scene.ACTIVE_EDIT_OBJECT);
        if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
            for (SceneObject o: Scene.getObjectsByType(Scene.ACTIVE_EDIT_OBJECT.CLASS)) {
                boolean add = true;
                for (Dialogue s: o.DIALOGUES) {
                    if (s.NAME.equals(dialogue.NAME)) {
                        add = false;
                    }
                }
                if (add) {
                    Dialogue s = new Dialogue();
                    dialogue.copyTo(s);
                    s.setParent(o);
                    o.DIALOGUES.add(s);
                }
            }
        }

        Scene.ACTIVE_EDIT_OBJECT.DIALOGUES.add(dialogue);
        ArrayList<String> anim_names = new ArrayList<String>();
        for (Dialogue s: Scene.ACTIVE_EDIT_OBJECT.DIALOGUES) {
            anim_names.add(s.NAME);
        }
        dialogueChooser.setListData(anim_names.toArray());
        dialogueChooser.setSelectedIndex(anim_names.size()-1);
    }//GEN-LAST:event_newDialogueButtonActionPerformed

    private void dialogueChooserValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dialogueChooserValueChanged
        if (dialogueChooser.getSelectedIndex() > -1) {
            deleteDialogueButton.setEnabled(true);
            //update the dialogue options
            Dialogue d = Scene.ACTIVE_EDIT_OBJECT.DIALOGUES.get(dialogueChooser.getSelectedIndex());
            dialogueEventChooser.setListData(d.QUEUE.toArray());
            duplicateDialogueButton.setEnabled(true);
            dialogueNameField.setEnabled(true);
            addThisSpeakEventButton.setEnabled(true);
            addOtherSpeakEventButton.setEnabled(true);
            addPlayerChoiceButton.setEnabled(true);
        } else {
            deleteDialogueButton.setEnabled(false);
            duplicateDialogueButton.setEnabled(false);
            dialogueNameField.setEnabled(false);
            addThisSpeakEventButton.setEnabled(false);
            addOtherSpeakEventButton.setEnabled(false);
            addPlayerChoiceButton.setEnabled(false);
        }
    }//GEN-LAST:event_dialogueChooserValueChanged

    private void blockParamValueFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_blockParamValueFieldKeyReleased
        int index = flowChooser.getSelectedIndex();
        ArrayList<Flow> list = Scene.ACTIVE_EDIT_OBJECT.FLOWS;
        Flow flow = list.get(index);
        if (blockParamValueField.getText().length() == 0) {
            blockParamValueField.setForeground(Color.red);
            return;
        }
        int p_index = blockParamChooser.getSelectedIndex();
        int b_index = flow.indexOf(FlowCanvas.SELECTED_BLOCK);
        if (evt.getKeyChar() == '\n') {
            System.out.println("B index = "+b_index);
            if (b_index > -1) {
                Flow old_f = new Flow(); flow.copyTo(old_f);
                flow.getBlock(b_index).setParametre(p_index, 0, blockParamValueField.getText());
                Flow.refactor(flow, old_f);
                GUI.refreshObjectEditor();
                flowChooser.setSelectedIndex(index);
                blockParamValueField.grabFocus();
                blockParamValueField.setForeground(Color.black);
            }

        }
        if (!blockParamValueField.getText().equals(FlowCanvas.SELECTED_BLOCK.getParametre(p_index, 0)))
        blockParamValueField.setForeground(Color.blue);
    }//GEN-LAST:event_blockParamValueFieldKeyReleased

    private void blockParamChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockParamChooserActionPerformed
        if (FlowCanvas.SELECTED_BLOCK != null)
        blockParamValueField.setText(FlowCanvas.SELECTED_BLOCK.getParametre(blockParamChooser.getSelectedIndex(), 0));
    }//GEN-LAST:event_blockParamChooserActionPerformed

    private void flowCanvasMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flowCanvasMouseMoved
        FlowCanvas.LAST_MOUSE_X = evt.getX();
        FlowCanvas.LAST_MOUSE_Y = evt.getY();
        flowCanvas.repaint();
    }//GEN-LAST:event_flowCanvasMouseMoved

    private void flowCanvasMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flowCanvasMouseDragged
        flowCanvas.grabFocus();
        Block b = FlowCanvas.getBlock(evt.getX()-FlowCanvas.ORIGIN_X, evt.getY()-FlowCanvas.ORIGIN_Y);
        int diff_x = evt.getX() - FlowCanvas.LAST_MOUSE_X, diff_y = evt.getY() - FlowCanvas.LAST_MOUSE_Y;
        if (b == null) {
            FlowCanvas.ORIGIN_X += diff_x;
            FlowCanvas.ORIGIN_Y += diff_y;

        } else {
            b.setX(b.getCoords()[0] + diff_x);
            b.setY(b.getCoords()[1] + diff_y);
        }
        FlowCanvas.LAST_MOUSE_X = evt.getX();
        FlowCanvas.LAST_MOUSE_Y = evt.getY();
        flowCanvas.repaint();
    }//GEN-LAST:event_flowCanvasMouseDragged

    private void flowCanvasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flowCanvasMouseReleased

    }//GEN-LAST:event_flowCanvasMouseReleased

    private void flowCanvasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flowCanvasMouseClicked
        Flow f = Scene.ACTIVE_EDIT_OBJECT.FLOWS.get(flowChooser.getSelectedIndex());
        Flow old_f = new Flow(); f.copyTo(old_f);
        Block b = FlowCanvas.getBlock(evt.getX()-FlowCanvas.ORIGIN_X, evt.getY()-FlowCanvas.ORIGIN_Y);
        if (b != null) {
            int d = b.getDot(evt.getX()-FlowCanvas.ORIGIN_X, evt.getY()-FlowCanvas.ORIGIN_Y);
            System.out.println("You clicked on: "+b.title()+" (dot "+d+")");
            if (evt.getButton() == MouseEvent.BUTTON1) {
                if (d > -1) {
                    FlowCanvas.LAST_MOUSE_CLICK_X = evt.getX()-FlowCanvas.ORIGIN_X;
                    FlowCanvas.LAST_MOUSE_CLICK_Y = evt.getY()-FlowCanvas.ORIGIN_Y;
                    if (FlowCanvas.SELECTED_BLOCK != null && FlowCanvas.SELECTED_DOT > -1) {

                        int from = FlowCanvas.SELECTED_DOT, to = d; boolean accept_connection = false;
                        if (from == 1) accept_connection = to >= 5 || to == 0; else accept_connection = to == 0;
                        System.out.println("From: "+from+", To: "+to);

                        if (accept_connection) {
                            if (to >= 5) {
                                //connecting to parametre nodes
                                if (from == 1 && b.getParametre(d-5, 2).equals(FlowCanvas.SELECTED_BLOCK.getOutputType()) || from > 1) {
                                    b.setParametreConnection(d-5, FlowCanvas.SELECTED_BLOCK.getID());
                                    Flow.refactor(f, old_f);
                                }
                            } else {
                                FlowCanvas.SELECTED_BLOCK.setConnection(FlowCanvas.SELECTED_DOT, b.getID());
                                Flow.refactor(f, old_f);
                            }
                            FlowCanvas.SELECTED_BLOCK = null;
                            FlowCanvas.SELECTED_DOT = -1;
                        }
                    } else {
                        if (d > 0) {
                            FlowCanvas.SELECTED_BLOCK = b;
                            FlowCanvas.SELECTED_DOT = d;
                        }
                    }
                } else { //if no dot was clicked, then just select the block and refresh
                    if (FlowCanvas.SELECTED_DOT < 0) {
                        FlowCanvas.SELECTED_BLOCK = b;
                        refreshBlockOptions();
                    }
                }
            } else {
                if (d >= 5) {
                    b.setParametreConnection(d-5, 0);
                    Flow.refactor(f, old_f);
                } else if (d > 0) {
                    b.setConnection(d, 0);
                    Flow.refactor(f, old_f);
                }
            }
        } else {
            refreshBlockOptions();
            FlowCanvas.SELECTED_BLOCK = null;
            FlowCanvas.SELECTED_DOT = -1;
        }
        refreshBlockOptions();
        flowCanvas.repaint();
    }//GEN-LAST:event_flowCanvasMouseClicked

    private void addBlockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBlockButtonActionPerformed
        Flow f = Scene.ACTIVE_EDIT_OBJECT.FLOWS.get(flowChooser.getSelectedIndex());
        String path_str = "", name = "";
        Object[] path = blockChooser.getSelectionPath().getPath();
        name = path[path.length-1].toString();
        for (int i = 0; i != path.length; i++) {
            if (i == 0) continue;
            if (path[i].toString().equals(name) == false) {
                path_str+= path[i].toString()+"/";
            }
        }
        if (path_str.charAt(path_str.length()-1) == '/') {
            path_str = path_str.substring(0, path_str.length()-1);
        }
        Block b = BlockList.getBlock(name, path_str);
        if (b == null) return;
        Block new_b = new Block();
        b.copyTo(new_b);
        b.randomID();
        Flow old_f = new Flow(); f.copyTo(old_f);
        f.addBlock(new_b);
        Flow.refactor(f, old_f);
        new_b.setX(flowCanvas.getWidth()/2 - FlowCanvas.ORIGIN_X);
        new_b.setY(flowCanvas.getHeight()/2 - FlowCanvas.ORIGIN_Y);
        flowCanvas.repaint();
    }//GEN-LAST:event_addBlockButtonActionPerformed

    private void blockChooserValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_blockChooserValueChanged
        addBlockButton.setEnabled(blockChooser.getSelectionPath() != null);
    }//GEN-LAST:event_blockChooserValueChanged

    private void deleteFlowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFlowButtonActionPerformed
        int index = flowChooser.getSelectedIndex();
        Flow flow = Scene.ACTIVE_EDIT_OBJECT.FLOWS.get(index);

        if (flow != null) {
            if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
                /*REMOVE THIS ANIMATION FROM ALL INSTANCES OF THE EDITED OBJECT*/
                if (Scene.ACTIVE_EDIT_OBJECT.CLASS.isEmpty()) return;
                for (SceneObject o: Scene.getObjectsByType(Scene.ACTIVE_EDIT_OBJECT.CLASS)) {
                    for (Flow f: o.FLOWS) {
                        if (f.equalTo(flow)) {
                            o.FLOWS.remove(f);
                            break;
                        }
                    }
                }
            }
            Scene.ACTIVE_EDIT_OBJECT.FLOWS.remove(flow);
            ArrayList<String> flow_names = new ArrayList<String>();
            for (Flow f: Scene.ACTIVE_EDIT_OBJECT.FLOWS) {
                flow_names.add(f.NAME);
            }
            flowChooser.setListData(flow_names.toArray());
            if (index < flow_names.size()) {
                flowChooser.setSelectedIndex(index);
            } else {
                flowChooser.setSelectedIndex(flow_names.size()-1);
            }
        }
    }//GEN-LAST:event_deleteFlowButtonActionPerformed

    private void duplicateFlowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicateFlowButtonActionPerformed
        int index = flowChooser.getSelectedIndex();
        Flow flow = new Flow();
        Flow existing = Scene.ACTIVE_EDIT_OBJECT.FLOWS.get(index);
        existing.copyTo(flow);
        flow.NAME+=Math.abs(new Random().nextInt() % 10000);
        Scene.ACTIVE_EDIT_OBJECT.FLOWS.add(flow);
        ArrayList<String> flow_names = new ArrayList<String>();
        for (Flow s: Scene.ACTIVE_EDIT_OBJECT.FLOWS) {
            flow_names.add(s.NAME);
        }
        if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
            /*ADD THIS ANIMATION TO ALL INSTANCES OF THE EDITED OBJECT*/
            if (Scene.ACTIVE_EDIT_OBJECT.CLASS.isEmpty()) return;
            for (SceneObject o: Scene.getObjectsByType(Scene.ACTIVE_EDIT_OBJECT.CLASS)) {
                boolean add = true;
                for (Flow s: o.FLOWS) {
                    if (s.NAME.equals(flow.NAME)) {
                        add = false;
                    }
                }
                Flow s = new Flow();
                flow.copyTo(s);
                if (add) o.FLOWS.add(s);
            }
        }
        flowChooser.setListData(flow_names.toArray());
        flowChooser.setSelectedIndex(flow_names.size()-1);
    }//GEN-LAST:event_duplicateFlowButtonActionPerformed

    private void newFlowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFlowButtonActionPerformed
        Flow flow = new Flow();
        flow.NAME = "flowchart"+Math.abs(new Random().nextInt());
        Scene.ACTIVE_EDIT_OBJECT.FLOWS.add(flow);
        ArrayList<String> flow_names = new ArrayList<String>();
        for (Flow s: Scene.ACTIVE_EDIT_OBJECT.FLOWS) {
            flow_names.add(s.NAME);
        }
        if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
            /*ADD THIS FLOW TO ALL INSTANCES OF THE EDITED OBJECT*/
            if (Scene.ACTIVE_EDIT_OBJECT.CLASS.isEmpty()) return;
            for (SceneObject o: Scene.getObjectsByType(Scene.ACTIVE_EDIT_OBJECT.CLASS)) {
                boolean add = true;
                for (Flow s: o.FLOWS) {
                    if (s.NAME.equals(flow.NAME)) {
                        add = false;
                    }
                }
                Flow s = new Flow();
                flow.copyTo(s);
                if (add) o.FLOWS.add(s);
            }
        }
        flowChooser.setListData(flow_names.toArray());
        flowChooser.setSelectedIndex(flow_names.size()-1);
    }//GEN-LAST:event_newFlowButtonActionPerformed

    private void flowNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_flowNameFieldKeyReleased
        int index = flowChooser.getSelectedIndex();
        ArrayList<Flow> list = Scene.ACTIVE_EDIT_OBJECT.FLOWS;
        Flow flow = list.get(index);
        if (Scene.ACTIVE_EDIT_OBJECT.flowExists(flowNameField.getText()) || flowNameField.getText().length() == 0) {
            flowNameField.setForeground(Color.red);
            return;
        }
        if (evt.getKeyChar() == '\n') {
            /**APPLY THE RENAME TO ALL SCRIPTS WITH MATCHING NAMES AND CONTENTS**/
            if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
                for (SceneObject o: Scene.getObjectsByType(Scene.ACTIVE_EDIT_OBJECT.CLASS)) {
                    for (Flow s: o.FLOWS) {
                        if (flow.equalTo(s)) {
                            s.NAME = flowNameField.getText();
                        }
                    }
                }
            }
            flow.NAME = flowNameField.getText();
            GUI.refreshObjectEditor();
            flowChooser.setSelectedIndex(index);
            flowNameField.grabFocus();
            flowNameField.setForeground(Color.black);
        }
        if (!flowNameField.getText().equals(flow.NAME)) flowNameField.setForeground(Color.blue);
    }//GEN-LAST:event_flowNameFieldKeyReleased

    private void flowNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flowNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flowNameFieldActionPerformed

    private void flowChooserValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_flowChooserValueChanged
        if (flowChooser.getSelectedIndex() > -1) {
            int index = flowChooser.getSelectedIndex();
            flowNameField.setText(Scene.ACTIVE_EDIT_OBJECT.FLOWS.get(index).NAME);
            flowNameField.setEnabled(true);
            deleteFlowButton.setEnabled(true);
            duplicateFlowButton.setEnabled(true);
            runOnSpawnCheckbox.setEnabled(true);
            runOnSpawnCheckbox.setSelected(Scene.ACTIVE_EDIT_OBJECT.FLOWS.get(index).RUN_ON_SPAWN);
            addBlockButton.setEnabled(true);
            blockChooser.setEnabled(true);
            flowCanvas.repaint();
        } else {
            runOnSpawnCheckbox.setEnabled(false);
            blockChooser.setEnabled(false);
            flowNameField.setEnabled(false);
            flowNameField.setText("");
            deleteFlowButton.setEnabled(false);
            duplicateFlowButton.setEnabled(false);
            addBlockButton.setEnabled(false);
        }
        flowCanvas.repaint();
    }//GEN-LAST:event_flowChooserValueChanged

    private void objectNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objectNameFieldKeyReleased
        if (Scene.sceneObjectExists(objectNameField.getText()) || objectNameField.getText().length() == 0) {
            objectNameField.setForeground(Color.red);
            return;
        }
        if (evt.getKeyChar() == '\n') {
            Scene.ACTIVE_EDIT_OBJECT.NAME = objectNameField.getText();
            GUI.refreshObjectEditor();
            GUI.refreshObjectProperties();
            GUI.refreshGalleryListings();
            objectNameField.setForeground(Color.black);
            return;
        }
        if (!objectNameField.getText().equals(Scene.ACTIVE_EDIT_OBJECT.NAME)) objectNameField.setForeground(Color.blue);
    }//GEN-LAST:event_objectNameFieldKeyReleased

    private void objectNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_objectNameFieldActionPerformed

    private void objectTextureFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objectTextureFieldKeyReleased

        if (new File(Scene.USER_HOME+"/level_editor/projects/"+Scene.PROJECT_NAME+"/assets/textures/objects/"+objectTextureField.getText()+".png")
            .exists() == false) {
            objectTextureField.setForeground(Color.red);
            return;
        }

        if (evt.getKeyChar() == '\n') {
            if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
                for (SceneObject o: Scene.getObjectsByType(Scene.ACTIVE_EDIT_OBJECT.CLASS)) {
                    o.TEXTURE_NAME = objectTextureField.getText();
                }
            }
            Scene.ACTIVE_EDIT_OBJECT.TEXTURE_NAME = objectTextureField.getText();
            GUI.refreshObjectEditor();
            GUI.refreshObjectProperties();
            GUI.refreshGalleryListings();
            objectTextureField.setForeground(Color.black);
            return;
        }
        if (!objectTextureField.getText().equals(Scene.ACTIVE_EDIT_OBJECT.TEXTURE_NAME)) objectTextureField.setForeground(Color.blue);
    }//GEN-LAST:event_objectTextureFieldKeyReleased

    private void objectTypeFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objectTypeFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_objectTypeFieldKeyTyped

    private void objectTypeFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objectTypeFieldKeyReleased
        for (SceneObject o: Scene.OBJECT_GALLERY) {
            if (o.CLASS.equals(objectTypeField.getText()) || objectTypeField.getText().length() == 0) {
                objectTypeField.setForeground(Color.red);
                return;
            }
        }
        if (evt.getKeyChar() == '\n') {
            if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
                for (SceneObject o: Scene.getObjectsByType(Scene.ACTIVE_EDIT_OBJECT.CLASS)) {
                    o.CLASS = objectTypeField.getText();
                }
            }
            Scene.ACTIVE_EDIT_OBJECT.CLASS = objectTypeField.getText();
            GUI.refreshObjectEditor();
            GUI.refreshObjectProperties();
            GUI.refreshGalleryListings();
            objectTypeField.setForeground(Color.black);
            return;
        }
        if (!Scene.ACTIVE_EDIT_OBJECT.CLASS.equals(objectTypeField.getText())) objectTypeField.setForeground(Color.blue);
    }//GEN-LAST:event_objectTypeFieldKeyReleased

    private void objectCollidesCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectCollidesCheckboxActionPerformed
        Scene.ACTIVE_EDIT_OBJECT.COLLIDES = !Scene.ACTIVE_EDIT_OBJECT.COLLIDES;
        GUI.refreshObjectEditor();
        GUI.refreshObjectProperties();
    }//GEN-LAST:event_objectCollidesCheckboxActionPerformed

    private void objectGravityCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectGravityCheckboxActionPerformed
        Scene.ACTIVE_EDIT_OBJECT.GRAVITY = !Scene.ACTIVE_EDIT_OBJECT.GRAVITY;
        GUI.refreshObjectEditor();
        GUI.refreshObjectProperties();
        //TODO: figure out how to apply this to all objects (Collides toggle included)
    }//GEN-LAST:event_objectGravityCheckboxActionPerformed

    private void runOnSpawnCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnSpawnCheckboxActionPerformed
        if (flowChooser.getSelectedIndex() <= -1) return;
        Flow f = Scene.ACTIVE_EDIT_OBJECT.FLOWS.get(flowChooser.getSelectedIndex());
        Flow old_f = new Flow(); f.copyTo(old_f);
        f.RUN_ON_SPAWN = runOnSpawnCheckbox.isSelected();
        Flow.refactor(f, old_f);
    }//GEN-LAST:event_runOnSpawnCheckboxActionPerformed

    private void deleteBlockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBlockButtonActionPerformed
        if (flowChooser.getSelectedIndex() <= -1) return;
        Flow f = Scene.ACTIVE_EDIT_OBJECT.FLOWS.get(flowChooser.getSelectedIndex());
        Flow old_f = new Flow(); f.copyTo(old_f);
        f.removeBlock(f.indexOf(FlowCanvas.SELECTED_BLOCK));
        //break all connections to this block from other blocks
        for (int i = 0; i != f.blockCount(); i++) {
            Block b = f.getBlock(i);
            for (int j = 0; j != b.paramCount(); j++) {
                if (b.getParametreConnection(j) == b.getID()) {
                    b.setParametreConnection(j, 0);
                }
            }
            for (int j = 0; j != b.dotConns().length; j++) {
                if (b.getConnection(j) == b.getID()) {
                    b.setConnection(j, 0);
                }
            }
        }
        Flow.refactor(f, old_f);
        flowCanvas.repaint();
    }//GEN-LAST:event_deleteBlockButtonActionPerformed

    private void dialogueEventChooserValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dialogueEventChooserValueChanged
        if (dialogueChooser.getSelectedIndex() > -1) {
            deleteDialogueButton.setEnabled(true);
            //update the dialogue options
            Dialogue d = Scene.ACTIVE_EDIT_OBJECT.DIALOGUES.get(dialogueChooser.getSelectedIndex());
            dialogueEventChooser.setListData(d.QUEUE.toArray());
            addThisSpeakEventButton.setEnabled(true);
            addOtherSpeakEventButton.setEnabled(true);
            addPlayerChoiceButton.setEnabled(true);
        } else {
            addThisSpeakEventButton.setEnabled(false);
            addOtherSpeakEventButton.setEnabled(false);
            addPlayerChoiceButton.setEnabled(false);
        }
    }//GEN-LAST:event_dialogueEventChooserValueChanged

    private void dialogueNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dialogueNameFieldKeyReleased
        int index = dialogueChooser.getSelectedIndex();
        Dialogue d = Scene.ACTIVE_EDIT_OBJECT.DIALOGUES.get(index);
        if (Scene.ACTIVE_EDIT_OBJECT.dialogueExists(dialogueNameField.getText()) || dialogueNameField.getText().length() == 0) {
            dialogueNameField.setForeground(Color.red);
            return;
        }
        if (evt.getKeyChar() == '\n') {
            Dialogue compare_to = new Dialogue(); d.copyTo(compare_to);
            d.NAME = dialogueNameField.getText();
            Dialogue.refactorAll(d, compare_to);
            GUI.refreshObjectEditor();
            dialogueChooser.setSelectedIndex(index);
            dialogueNameField.grabFocus();
            dialogueNameField.setForeground(Color.black);

        }
        if (!dialogueNameField.getText().equals(d.NAME)) dialogueNameField.setForeground(Color.blue);
    }//GEN-LAST:event_dialogueNameFieldKeyReleased

    public static void refreshBlockOptions() {
        System.out.println("Selected block "+FlowCanvas.SELECTED_BLOCK);
        blockParamChooser.setEnabled(FlowCanvas.SELECTED_BLOCK != null);
        deleteBlockButton.setEnabled(FlowCanvas.SELECTED_BLOCK != null);
        blockParamValueField.setEnabled(FlowCanvas.SELECTED_BLOCK != null);
        blockParamChooser.removeAllItems();
        if (FlowCanvas.SELECTED_BLOCK != null) {
            for (int i = 0; i != FlowCanvas.SELECTED_BLOCK.paramCount(); i++) {
                Object o = FlowCanvas.SELECTED_BLOCK.getParametre(i, 1)+" ("+FlowCanvas.SELECTED_BLOCK.getParametre(i, 2)+")";
                blockParamChooser.addItem(o);
            }
        }
    }
    
    public static void showDialog(JDialog d) {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        double width = screenSize.getWidth();
        double height = screenSize.getHeight();
        d.setLocation((int)(width/2)-(d.getWidth()/2),
            (int)(height/2)-((d.getHeight()/2)));
        d.setModal(true);
        d.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        d.setVisible(true);
        System.out.println("Showing "+d.getTitle());
    }
    
    public static void hideDialog(JDialog d) {
        d.setVisible(false);
        d.setModal(false);
        System.out.println("Hiding "+d.getTitle());
    }
    
    public static void refreshProjectListings() {
        File folder = new File(Scene.USER_HOME+"/level_editor/projects/");
        ArrayList<String> names = new ArrayList<String>();
        for (File f: folder.listFiles()) { if (f.isDirectory()) names.add(f.getName()); }
        projectList.setListData(names.toArray());
    }
    
    public static void refreshLevelListings() {
        ArrayList<String> names = new ArrayList<String>();
        for (Level l: Scene.LEVELS) { names.add(l.NAME); }
        levelList.setListData(names.toArray());
    }
    
    public static void showMessage(String message, JDialog parent) {
        if (parent != null) hideDialog(parent);
        JOptionPane.showMessageDialog(parent, message);
        if (parent != null) showDialog(parent);
    }
    
    public static void refreshGalleryListings() {
        ArrayList<String> names = new ArrayList<String>();
        for (SceneObject s: Scene.OBJECT_GALLERY) { names.add(s.CLASS); }
        galleryList.setListData(names.toArray());
        names.remove(0);
        galleryListSidebar.setListData(names.toArray());
    }
    
    public static void updateWindowTitle() {
        String title = "Platformer Creator 1.1 [Beta]";
        title += " / "+Scene.PROJECT_NAME;
        if (!Scene.doesProjectExist(Scene.PROJECT_NAME)) title += " *";
        if (Scene.CURRENT_LEVEL != null) title += " / "+Scene.CURRENT_LEVEL.NAME;
        window.setTitle(title);
    }
    
    public static void fillAnimationChooser() {
        ArrayList<String> anim_names = new ArrayList<String>();
        for (Animation s: Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS) {
            anim_names.add(s.NAME);
        }
        animationChooser.setListData(anim_names.toArray());
    }
    
    public static void fillAnimationFrameChooser() {
        int index = animationChooser.getSelectedIndex();
        ArrayList<String> anim_names = new ArrayList<String>();
        for (int i = 0; i != Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(index).WIDTHS.size(); i++) {
            anim_names.add("Frame #"+(i+1));
        }
        animationFrameChooser.setListData(anim_names.toArray());
    }
    
    public static void fillDialogueProperties() {
        int index = dialogueChooser.getSelectedIndex();
        ArrayList<String> anim_names = new ArrayList<String>();
        for (int i = 0; i != Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(index).WIDTHS.size(); i++) {
            anim_names.add("Frame #"+(i+1));
        }
        dialogueEventChooser.setListData(anim_names.toArray());
    }
    
    public static void fillDialogueChooser() {
        ArrayList<String> d_names = new ArrayList<String>();
        for (Dialogue s: Scene.ACTIVE_EDIT_OBJECT.DIALOGUES) {
            d_names.add(s.NAME);
        }
        dialogueChooser.setListData(d_names.toArray());
    }
    
    public static void refreshObjectEditor() {
        if (Scene.ACTIVE_EDIT_OBJECT == null) return;
        
        ArrayList<String> flow_names = new ArrayList<String>();
        for (Flow s: Scene.ACTIVE_EDIT_OBJECT.FLOWS) {
            flow_names.add(s.NAME);
        }
        flowChooser.setListData(flow_names.toArray());
        flowChooser.setSelectedIndex(-1);
        
        int pwidth = objectPreviewPane.getWidth();
        int pheight = objectPreviewPane.getHeight();
        int width = 0;
        int height = 0;
        int index = Scene.OBJECT_TEXTURE_NAMES.indexOf(Scene.ACTIVE_EDIT_OBJECT.TEXTURE_NAME);
        
        if (index > -1) {
            BufferedImage img = Scene.OBJECT_TEXTURES.get(index);
            int m = 1;
            if (img.getWidth() < img.getHeight()){
                m = pheight/img.getHeight()-1;
            } else {
                m = pwidth/img.getWidth()-1; 
            }
            width = img.getWidth()*m;
            height = img.getHeight()*m;
            objectPreviewPane.setIcon(new ImageIcon(img.getScaledInstance(width, height, Image.SCALE_FAST)));
            objectPreviewPane.setText("");
        } else {
            objectPreviewPane.setIcon(null);
            objectPreviewPane.setText("Preview unavailable.");
        }
        
        if (Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT)) {
            objectEditorDialog.setTitle("Editing '"+Scene.ACTIVE_EDIT_OBJECT.CLASS+"' in Object Gallery");
        } else {
            objectEditorDialog.setTitle("Editing '"+Scene.ACTIVE_EDIT_OBJECT.NAME+"' in '"+Scene.CURRENT_LEVEL.NAME+"'");
        }
        
        objectTypeField.setText(Scene.ACTIVE_EDIT_OBJECT.CLASS);
        objectTextureField.setText(Scene.ACTIVE_EDIT_OBJECT.TEXTURE_NAME);
        objectNameField.setText(Scene.ACTIVE_EDIT_OBJECT.NAME);
        objectGravityCheckbox.setSelected(Scene.ACTIVE_EDIT_OBJECT.GRAVITY);
        objectCollidesCheckbox.setSelected(Scene.ACTIVE_EDIT_OBJECT.COLLIDES);
        
        fillAnimationFields();
        
        ArrayList<String> dialogue_names = new ArrayList<String>();
        for (Dialogue s: Scene.ACTIVE_EDIT_OBJECT.DIALOGUES) {
            dialogue_names.add(s.NAME);
        }
        dialogueChooser.setListData(dialogue_names.toArray());
        dialogueChooser.setSelectedIndex(-1);
        
        for (int i = 0; i != objectDialoguePanel.getComponents().length; i++) {
            Component c = objectDialoguePanel.getComponents()[i];
            if (!(c.equals(dialogueChooser) || c.equals(newDialogueButton) || c instanceof JLabel)) {
                c.setEnabled(false);
            }
        }
        for (int i = 0; i != objectAnimationPanel.getComponents().length; i++) {
            Component c = objectAnimationPanel.getComponents()[i];
            if (!(c.equals(animationChooser) || c.equals(newAnimationButton) || c instanceof JLabel)) {
                c.setEnabled(false);
            }
        }
        
        objectEditorTabs.setEnabledAt(2, !Scene.ACTIVE_EDIT_OBJECT.isHitbox());
        objectTypeField.setEnabled(Scene.OBJECT_GALLERY.indexOf(Scene.ACTIVE_EDIT_OBJECT) > 0);
        objectTextureField.setEnabled(Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT));
        objectNameField.setEnabled(!Scene.OBJECT_GALLERY.contains(Scene.ACTIVE_EDIT_OBJECT));
    }
    
    public static void fillAnimationFields() {
        int index = animationChooser.getSelectedIndex();
        if (index == -1) {
            animationNameField.setText("");
            animationImageField.setText("");
            animationFrameChooser.setListData(new Object[]{});
            animationLoopCheckbox.setSelected(false);
            animationFrameDimensionsField.setText("");
            animationFrameDurationField.setText("");
        } else {
            Animation anim = Scene.ACTIVE_EDIT_OBJECT.ANIMATIONS.get(index);
            animationNameField.setText(anim.NAME);
            animationImageField.setText(anim.SPRITE_NAME);
            fillAnimationFrameChooser();
            animationLoopCheckbox.setSelected(anim.LOOP);
            if (anim.WIDTHS.isEmpty() == false) {
                animationFrameDurationField.setText(anim.FRAME_DURATION+"");
                animationFrameDimensionsField.setText(anim.WIDTHS.get(0)+" "+anim.HEIGHTS.get(0));
            } else {
                animationFrameDurationField.setText("");
                animationFrameDimensionsField.setText("");
            }
        }
        
        for (int i = 0; i != chooseAnimationPanel.getComponents().length; i++) {
            Component c = chooseAnimationPanel.getComponents()[i];
            if (c.equals(newAnimationButton) == false) {
                c.setEnabled(index > -1);
            }
        }
        for (int i = 0; i != animationPropertiesPanel.getComponents().length; i++) {
            Component c = animationPropertiesPanel.getComponents()[i];
            if (!c.equals(animationFrameChooser)) c.setEnabled(animationChooser.getSelectedValue() != null); else c.setEnabled(true);
            if (c.equals(animationFrameDimensionsField)
                    || c.equals(animationDeleteFrameButton)) c.setEnabled(animationChooser.getSelectedIndex() > -1 
                    && animationFrameChooser.getSelectedIndex() > -1);
        }
    }
    
    public static void refreshAnimationFramePreview(Animation anim, int f_index) {
        if (f_index == -1 || f_index >= anim.WIDTHS.size()) return;
        int asset_index = Scene.ANIMATION_TEXTURE_NAMES.indexOf(anim.SPRITE_NAME);
        int x = 0;
        for (int i = 0; i != f_index; i++) {x+=anim.WIDTHS.get(i);}
        if (asset_index > -1 && asset_index < Scene.ANIMATION_TEXTURE_NAMES.size()) {
            BufferedImage img = Scene.ANIMATION_TEXTURES.get(asset_index);
            if (x+anim.WIDTHS.get(f_index) > img.getWidth()) { framePreview.setIcon(null); return; }
            try {
                img = img.getSubimage(x, 0, anim.WIDTHS.get(f_index), anim.HEIGHTS.get(f_index));
            } catch (RasterFormatException e) {
                e.printStackTrace();
                framePreview.setIcon(null);
            }
            int zoom = ((Integer)(animationPreviewZoomChooser.getValue()));
            ImageIcon icon = new ImageIcon(
                    img.getScaledInstance(img.getWidth()*zoom, img.getHeight()*zoom, Image.SCALE_FAST));
            framePreview.setIcon(icon);
        }
    }
    
    public static void refreshFlowOptions() {
        flowNameField.setEnabled(flowChooser.getSelectedValue() != null);
        addBlockButton.setEnabled(flowChooser.getSelectedValue() != null);
    }
    
    public static void refreshDialogueOptions() {
        for (int i = 0; i != chooseDialoguePanel.getComponents().length; i++) {
            Component c = chooseDialoguePanel.getComponents()[i];
            if (!c.equals(newDialogueButton)) {
                c.setEnabled(dialogueChooser.getSelectedValue() != null);
            }
        }
    }
    
    public static void refreshLevelEditor() {
        sceneCanvas.repaint();
        levelSpawnField.setText(Scene.CURRENT_LEVEL.SPAWN_COORD[0]+" "+Scene.CURRENT_LEVEL.SPAWN_COORD[1]);
        camPosField.setText(Scene.CURRENT_LEVEL.CAM_COORD[0]+" "+Scene.CURRENT_LEVEL.CAM_COORD[1]);
        
        levelZoomSlider.setValue(Scene.CURRENT_LEVEL.ZOOM);
        
        ArrayList<String> anim_names = new ArrayList<String>();
        for (Script s: Scene.CURRENT_LEVEL.SCRIPTS) {
            anim_names.add(s.NAME);
        }
        
        Color top = new Color(Scene.CURRENT_LEVEL.R1, Scene.CURRENT_LEVEL.G1, Scene.CURRENT_LEVEL.B1);
        Color bottom = new Color(Scene.CURRENT_LEVEL.R2, Scene.CURRENT_LEVEL.G2, Scene.CURRENT_LEVEL.B2);
        Color ambient = new Color(Scene.CURRENT_LEVEL.R3, Scene.CURRENT_LEVEL.G3, Scene.CURRENT_LEVEL.B3);
        
        
    }
    
    public static void refreshObjectProperties() {
        if (Scene.SELECTED_OBJECT != null) {
            objectTypeChooser.setEnabled(true);
            objectTypeChooser.setSelectedIndex(Scene.SELECTED_OBJECT.LAYER);
            bringForwardButton.setEnabled(true);
            sendBackwardsButton.setEnabled(true);
            objectCloneButton.setEnabled(true);
            viewAdvancedObjectOptionsButton.setEnabled(true);
            objectNameLabel.setText(Scene.SELECTED_OBJECT.NAME);
        } else {
            objectTypeChooser.setEnabled(false);
            objectTypeChooser.setSelectedIndex(-1);
            bringForwardButton.setEnabled(false);
            sendBackwardsButton.setEnabled(false);
            objectCloneButton.setEnabled(false);
            viewAdvancedObjectOptionsButton.setEnabled(false);
            objectNameLabel.setText("(select an object to view its properties)");
        }
    }
    
    public static void runProject(String level_name) {
        boolean[] updates = DownloadThread.checkForUpdates();
        boolean game_exists = new File(Scene.USER_HOME+"/level_editor/jars/test.jar").exists();
        File game_data = new File(Scene.USER_HOME+"/level_editor/jars/test.properties");
        if (game_exists == false || updates[0]) {
            DownloadThread.downloadThreaded("http://computerology.bitbucket.org/tools/editor/test.jar", Scene.USER_HOME+"/level_editor/jars/test.jar");
            game_data.delete();
            return;
        }

        try {
            //Scene.DOWNLOAD_THREAD.download("http://computerology.bitbucket.org/index.html", "C:/Users/Jeremy/Desktop/index.html");
            GUI.statusIndicator.setText("Starting game...");
            Process p = Runtime.getRuntime()
            .exec("java -jar \""+Scene.USER_HOME+"/level_editor/jars/test.jar\" \""+Scene.USER_HOME+"/level_editor/projects/"+Scene.PROJECT_NAME+"\" \""+level_name+"\"");
            BufferedReader reader =
            new BufferedReader(new InputStreamReader(p.getInputStream()));
            window.setVisible(false);
            System.out.println("---START OF GAME OUTPUT---");
            String results = "";
            String line = "";
            while ((line=reader.readLine())!=null) {
                System.out.println(line);
                results+=line+"\n";
            }
            System.out.println("---END OF GAME OUTPUT---");
            resultsTextBox.setText(results);
            showDialog(testOutputDialog);
            window.setVisible(true);
            GUI.statusIndicator.setText("");
        } catch (IOException ex) {
            //Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Scene.loadAssets();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BlockList.init();
                Scene.USER_HOME = System.getProperty("user.home");
                window = new GUI();
                window.setVisible(true);
                File home = new File(Scene.USER_HOME+"/level_editor/");
                home.mkdir();
                File projects = new File(Scene.USER_HOME+"/level_editor/projects");
                projects.mkdir();
                File jars = new File(Scene.USER_HOME+"/level_editor/jars");
                jars.mkdir();
                Scene.newProject();
                updateWindowTitle();
                Scene.PREVIEW_THREAD = new PreviewThread();
                Scene.PREVIEW_THREAD.start();
                JOptionPane.showMessageDialog(null, "Welcome, "+System.getProperty("user.name")+"!\n"
                        + "New? You can start working with the blank project currently open.\n"
                        + "Returning? You can continue a previously saved project using the menu.\n"
                        + "Good luck!");
                DownloadThread.checkForUpdates();
            }
        });
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton addBlockButton;
    private static javax.swing.JTextField addNewChoiceField;
    private static javax.swing.JButton addOtherSpeakEventButton;
    private static javax.swing.JButton addPlayerChoiceButton;
    private static javax.swing.JButton addThisSpeakEventButton;
    private static javax.swing.JTextPane ambientColorLabel;
    private static javax.swing.JSlider ambientIntensitySlider;
    private static javax.swing.JTextField ambientSoundField;
    private static javax.swing.JSlider ambientSoundVolumeSlider;
    private static javax.swing.JButton animationAddFrameButton;
    private static javax.swing.JList animationChooser;
    private static javax.swing.JButton animationDeleteFrameButton;
    public static javax.swing.JList animationFrameChooser;
    private static javax.swing.JTextField animationFrameDimensionsField;
    private static javax.swing.JTextField animationFrameDurationField;
    private static javax.swing.JTextField animationImageField;
    private static javax.swing.JCheckBox animationLoopCheckbox;
    private static javax.swing.JTextField animationNameField;
    private static javax.swing.JSpinner animationPreviewZoomChooser;
    private static javax.swing.JPanel animationPropertiesPanel;
    private static javax.swing.JCheckBox autoAmbientSoundCheckbox;
    private static javax.swing.JCheckBox autoBackgroundMusicCheckbox;
    private static javax.swing.JTextField backgroundMusicField;
    private static javax.swing.JSlider backgroundMusicVolumeSlider;
    public static javax.swing.JTree blockChooser;
    private static javax.swing.JComboBox blockParamChooser;
    private static javax.swing.JTextField blockParamValueField;
    private static javax.swing.JTextPane bottomBackgroundColorLabel;
    static javax.swing.JButton bringForwardButton;
    private static javax.swing.JTextField camPosField;
    private javax.swing.JButton cameraButton;
    private static javax.swing.JRadioButton choiceEventDialogueToggle;
    private static javax.swing.JRadioButton choiceEventResponseToggle;
    private static javax.swing.JRadioButton choiceEventScriptToggle;
    private static javax.swing.JTextField choiceEventValueField;
    private static javax.swing.JPanel chooseAnimationPanel;
    private javax.swing.JPanel chooseDialogueEventPanel;
    private static javax.swing.JPanel chooseDialoguePanel;
    private static javax.swing.JButton deleteAnimationButton;
    private static javax.swing.JButton deleteBlockButton;
    private static javax.swing.JButton deleteChoiceButton;
    private javax.swing.JButton deleteDialogueButton;
    private static javax.swing.JButton deleteDialogueEventButton;
    private static javax.swing.JButton deleteFlowButton;
    private javax.swing.JButton deleteGalleryObjectButton;
    private javax.swing.JButton deleteLevelButton;
    private javax.swing.JButton deleteProjectButton;
    private static javax.swing.JList dialogueChoiceList;
    private static javax.swing.JPanel dialogueChoicePanel;
    private static javax.swing.JList dialogueChooser;
    private static javax.swing.JList dialogueEventChooser;
    private static javax.swing.JButton dialogueEventMoveDownButton;
    private static javax.swing.JButton dialogueEventMoveUpButton;
    private static javax.swing.JTextField dialogueNameField;
    private static javax.swing.JPanel dialogueSayPanel;
    private static javax.swing.JTextField dialogueSpeechTextField;
    private static javax.swing.JCheckBox dialogueWaitCheckbox;
    public static javax.swing.JMenu downloadUpdateButton;
    private static javax.swing.JButton duplicateAnimationButton;
    private javax.swing.JButton duplicateDialogueButton;
    private static javax.swing.JButton duplicateFlowButton;
    private javax.swing.JButton duplicateGalleryObjectButton;
    private javax.swing.JButton editGalleryObjectButton;
    private javax.swing.JButton editLevelButton;
    private javax.swing.JButton editProjectButton;
    private javax.swing.JPanel editorPanel;
    private static javax.swing.JDialog errorCheckerDialog;
    private static javax.swing.JTextArea errorScanResults;
    private javax.swing.JButton exportToGalleryButton;
    public static gui.FlowCanvas flowCanvas;
    public static javax.swing.JList flowChooser;
    private static javax.swing.JTextField flowNameField;
    private static javax.swing.JLabel framePreview;
    static javax.swing.JList galleryList;
    static javax.swing.JList galleryListSidebar;
    private static javax.swing.JDialog helpDialog;
    private static javax.swing.JLabel inCurrentLevelLabel;
    private static javax.swing.JLabel inCurrentProjectLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private static javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private static javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private static javax.swing.JPanel jPanel334;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel levelAudioPanel;
    private static javax.swing.JColorChooser levelColorPicker;
    private javax.swing.JDialog levelEditorDialog;
    private static javax.swing.JTabbedPane levelEditorTabs;
    private javax.swing.JPanel levelLightingPanel;
    private static javax.swing.JList levelList;
    public static javax.swing.JDialog levelManagerDialog;
    private javax.swing.JMenu levelMenu;
    private javax.swing.JTextField levelNameField;
    private static javax.swing.JTextField levelSpawnField;
    private static javax.swing.JSlider levelZoomSlider;
    private static javax.swing.JRadioButton linkToDialogueRadioButton;
    private static javax.swing.JTextField linkToField;
    private static javax.swing.JRadioButton linkToScriptRadioButton;
    private static javax.swing.JCheckBox loopAmbientSoundCheckbox;
    private static javax.swing.JCheckBox loopBackgroundMusicCheckbox;
    public static javax.swing.JMenuBar menuBar;
    private javax.swing.JButton moveButton;
    private static javax.swing.JButton moveChoiceDownButton;
    private static javax.swing.JButton moveChoiceUpButton;
    private static javax.swing.JButton newAnimationButton;
    private static javax.swing.JButton newDialogueButton;
    private static javax.swing.JButton newFlowButton;
    private javax.swing.JButton newGalleryObjectButton;
    private javax.swing.JButton noButton;
    private static javax.swing.JPanel objectAnimationPanel;
    private static javax.swing.JPanel objectBasicPanel;
    static javax.swing.JButton objectCloneButton;
    static javax.swing.JCheckBox objectCollidesCheckbox;
    public static javax.swing.JPanel objectDialoguePanel;
    private static javax.swing.JDialog objectEditorDialog;
    private static javax.swing.JTabbedPane objectEditorTabs;
    private javax.swing.JButton objectGalleryButton;
    public static javax.swing.JDialog objectGalleryDialog;
    static javax.swing.JCheckBox objectGravityCheckbox;
    private javax.swing.JPanel objectLogicPanel;
    static javax.swing.JTextField objectNameField;
    static javax.swing.JLabel objectNameLabel;
    private static javax.swing.JLabel objectPreviewPane;
    static javax.swing.JTextField objectTextureField;
    static javax.swing.JComboBox objectTypeChooser;
    static javax.swing.JTextField objectTypeField;
    private javax.swing.JLabel outcomeLabel;
    private static javax.swing.JList projectList;
    public static javax.swing.JDialog projectManagerDialog;
    private javax.swing.JTextField projectNameField;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JButton renameLevelButton;
    private javax.swing.JButton renameProjectButton;
    private javax.swing.JButton resizeButton;
    private javax.swing.JButton resultsCloseButton;
    private static javax.swing.JTextArea resultsTextBox;
    private static javax.swing.JCheckBox runOnSpawnCheckbox;
    public static javax.swing.JMenuItem runProjectAtLevelButton;
    public static javax.swing.JMenuItem runProjectButton;
    public static javax.swing.JDialog saveConfirmDialog;
    private static javax.swing.JLabel saveDialogContextLabel;
    private static javax.swing.JButton scanForErrorsButton;
    private static gui.SceneCanvas sceneCanvas;
    private javax.swing.JButton selectButton;
    static javax.swing.JButton sendBackwardsButton;
    private javax.swing.JButton spawnButton;
    private javax.swing.JButton spawnGeneralButton;
    public static javax.swing.JMenu statusIndicator;
    public static javax.swing.JDialog testOutputDialog;
    private static javax.swing.JToggleButton toggleAnimationPreviewButton;
    private static javax.swing.JTextPane topBackgroundColorLabel;
    static javax.swing.JButton viewAdvancedObjectOptionsButton;
    private javax.swing.JButton yesButton;
    // End of variables declaration//GEN-END:variables
}
