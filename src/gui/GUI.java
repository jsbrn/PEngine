package gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.awt.image.RasterFormatException;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import misc.Assets;
import misc.MiscMath;
import project.objects.components.Animation;
import project.objects.components.Block;
import project.objects.components.Flow;
import threads.UpdateManager;
import project.Level;
import project.Project;
import project.objects.SceneObject;

public class GUI extends javax.swing.JFrame {

    static GUI window;

    /**
     * Creates new form First
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        testOutputDialog = new javax.swing.JDialog();
        jScrollPane9 = new javax.swing.JScrollPane();
        resultsTextBox = new javax.swing.JTextArea();
        levelManagerDialog = new javax.swing.JDialog();
        jScrollPane12 = new javax.swing.JScrollPane();
        levelList = new javax.swing.JList();
        deleteLevelButton = new javax.swing.JButton();
        editLevelButton = new javax.swing.JButton();
        levelNameField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        renameLevelButton = new javax.swing.JButton();
        objectEditor = new javax.swing.JFrame();
        objectEditorTabs = new javax.swing.JTabbedPane();
        sceneObjectCanvas = new gui.SceneObjectCanvas();
        basicOptionsPanel = new javax.swing.JPanel();
        objectGravityCheckbox = new javax.swing.JCheckBox();
        objectCollidesCheckbox = new javax.swing.JCheckBox();
        changeObjectTypeButton = new javax.swing.JButton();
        changeObjectNameButton = new javax.swing.JButton();
        changeObjectTextureButton = new javax.swing.JButton();
        objectTypeField = new javax.swing.JTextField();
        objectNameField = new javax.swing.JTextField();
        objectTextureField = new javax.swing.JTextField();
        flowCanvas = new gui.FlowCanvas();
        animationCanvas = new gui.AnimationCanvas();
        jPanel8 = new javax.swing.JPanel();
        animationChooser = new javax.swing.JComboBox<>();
        newAnimationButton = new javax.swing.JButton();
        deleteAnimationButton = new javax.swing.JButton();
        renameAnimationButton = new javax.swing.JButton();
        animationSpeedButton = new javax.swing.JButton();
        animationSpriteButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        addFrameButton = new javax.swing.JButton();
        removeFrameButton = new javax.swing.JButton();
        playAnimationButton = new javax.swing.JToggleButton();
        frameCountLabel = new javax.swing.JLabel();
        galleryObjectPanel = new javax.swing.JPanel();
        galleryObjectChooser = new javax.swing.JComboBox<>();
        newGalleryObjectButton = new javax.swing.JButton();
        deleteGalleryObjectButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sceneCanvas = new gui.SceneCanvas();
        jPanel13 = new javax.swing.JPanel();
        playButton = new javax.swing.JButton();
        startAtCurrentLevelCheckBox = new javax.swing.JCheckBox();
        topPanel = new javax.swing.JPanel();
        bringForwardButton = new javax.swing.JButton();
        sendBackwardsButton = new javax.swing.JButton();
        cloneObjectButton = new javax.swing.JButton();
        editObjectButton = new javax.swing.JButton();
        objectLayerChooser = new javax.swing.JComboBox();
        newObjectButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        deleteObjectButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        projectMenu = new javax.swing.JMenu();
        newProjectButton = new javax.swing.JMenuItem();
        openProjectButton = new javax.swing.JMenuItem();
        saveProjectButton = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        newLevelButton = new javax.swing.JMenuItem();
        levelManagerButton = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        objectGalleryButton = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        reloadAssetsButton = new javax.swing.JMenuItem();
        openAssetsFolderButton = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        viewRootButton = new javax.swing.JMenuItem();
        levelMenu = new javax.swing.JMenu();
        spawnMenuItem = new javax.swing.JMenuItem();
        cameraLocationMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        levelBoundsMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        topColorMenuItem = new javax.swing.JMenuItem();
        bottomColorMenuItem = new javax.swing.JMenuItem();
        lightingColorMenuItem = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        selectBGMusic = new javax.swing.JMenuItem();
        loopBGMusicMenuItem = new javax.swing.JCheckBoxMenuItem();
        autoplayBGMusicMenuItem = new javax.swing.JCheckBoxMenuItem();
        musicVolumeMenuItem = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        selectAmbienceMenuItem = new javax.swing.JMenuItem();
        loopAmbientSoundMenuItem = new javax.swing.JCheckBoxMenuItem();
        autoplayAmbientSoundMenuItem = new javax.swing.JCheckBoxMenuItem();
        ambientSoundVolumeMenuItem = new javax.swing.JMenuItem();
        statusIndicator = new javax.swing.JMenu();

        testOutputDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        testOutputDialog.setTitle("Game output");
        testOutputDialog.setBounds(new java.awt.Rectangle(0, 0, 600, 490));
        testOutputDialog.setMinimumSize(new java.awt.Dimension(400, 490));
        testOutputDialog.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        testOutputDialog.setResizable(false);
        testOutputDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                genericDialogWindowClosing(evt);
            }
        });

        resultsTextBox.setColumns(20);
        resultsTextBox.setLineWrap(true);
        resultsTextBox.setRows(5);
        jScrollPane9.setViewportView(resultsTextBox);

        javax.swing.GroupLayout testOutputDialogLayout = new javax.swing.GroupLayout(testOutputDialog.getContentPane());
        testOutputDialog.getContentPane().setLayout(testOutputDialogLayout);
        testOutputDialogLayout.setHorizontalGroup(
            testOutputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testOutputDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        testOutputDialogLayout.setVerticalGroup(
            testOutputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testOutputDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                .addContainerGap())
        );

        levelManagerDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        levelManagerDialog.setTitle("Choose a level...");
        levelManagerDialog.setBounds(new java.awt.Rectangle(300, 300, 356, 270));
        levelManagerDialog.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        levelManagerDialog.setResizable(false);
        levelManagerDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                genericDialogWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                levelManagerDialogWindowOpened(evt);
            }
        });

        levelList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        levelList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                levelListValueChanged(evt);
            }
        });
        jScrollPane12.setViewportView(levelList);

        deleteLevelButton.setText("Delete");
        deleteLevelButton.setEnabled(false);
        deleteLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLevelButtonActionPerformed(evt);
            }
        });

        editLevelButton.setText("Edit!");
        editLevelButton.setEnabled(false);
        editLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLevelButtonActionPerformed(evt);
            }
        });

        levelNameField.setEnabled(false);

        jLabel21.setText("Name:");

        renameLevelButton.setText("Rename");
        renameLevelButton.setEnabled(false);
        renameLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameLevelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout levelManagerDialogLayout = new javax.swing.GroupLayout(levelManagerDialog.getContentPane());
        levelManagerDialog.getContentPane().setLayout(levelManagerDialogLayout);
        levelManagerDialogLayout.setHorizontalGroup(
            levelManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelManagerDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(levelManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12)
                    .addGroup(levelManagerDialogLayout.createSequentialGroup()
                        .addComponent(editLevelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteLevelButton))
                    .addGroup(levelManagerDialogLayout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(levelNameField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(renameLevelButton)))
                .addContainerGap())
        );
        levelManagerDialogLayout.setVerticalGroup(
            levelManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelManagerDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(levelManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(levelNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(renameLevelButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(levelManagerDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteLevelButton)
                    .addComponent(editLevelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        objectEditor.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        objectEditor.setBounds(new java.awt.Rectangle(0, 0, 700, 500));
        objectEditor.setMinimumSize(new java.awt.Dimension(700, 500));
        objectEditor.setPreferredSize(new java.awt.Dimension(700, 500));
        objectEditor.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                objectEditorWindowClosing(evt);
            }
        });

        basicOptionsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        objectGravityCheckbox.setText("Gravity");
        objectGravityCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectGravityCheckboxActionPerformed(evt);
            }
        });

        objectCollidesCheckbox.setText("Collides");
        objectCollidesCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectCollidesCheckboxActionPerformed(evt);
            }
        });

        changeObjectTypeButton.setText("Change type...");
        changeObjectTypeButton.setActionCommand("c");
        changeObjectTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeObjectProperty(evt);
            }
        });

        changeObjectNameButton.setText("Change name...");
        changeObjectNameButton.setActionCommand("n");
        changeObjectNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeObjectProperty(evt);
            }
        });

        changeObjectTextureButton.setText("Change texture...");
        changeObjectTextureButton.setActionCommand("t");
        changeObjectTextureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeObjectProperty(evt);
            }
        });

        objectTypeField.setEditable(false);

        objectNameField.setEditable(false);

        objectTextureField.setEditable(false);

        javax.swing.GroupLayout basicOptionsPanelLayout = new javax.swing.GroupLayout(basicOptionsPanel);
        basicOptionsPanel.setLayout(basicOptionsPanelLayout);
        basicOptionsPanelLayout.setHorizontalGroup(
            basicOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(basicOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(basicOptionsPanelLayout.createSequentialGroup()
                        .addGroup(basicOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(changeObjectTypeButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(changeObjectNameButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(changeObjectTextureButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(basicOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(objectTypeField)
                            .addComponent(objectNameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(objectTextureField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)))
                    .addGroup(basicOptionsPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(objectGravityCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(objectCollidesCheckbox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        basicOptionsPanelLayout.setVerticalGroup(
            basicOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(basicOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeObjectTypeButton)
                    .addComponent(objectTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(basicOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeObjectNameButton)
                    .addComponent(objectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(basicOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeObjectTextureButton)
                    .addComponent(objectTextureField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(basicOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(objectCollidesCheckbox)
                    .addComponent(objectGravityCheckbox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout sceneObjectCanvasLayout = new javax.swing.GroupLayout(sceneObjectCanvas);
        sceneObjectCanvas.setLayout(sceneObjectCanvasLayout);
        sceneObjectCanvasLayout.setHorizontalGroup(
            sceneObjectCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sceneObjectCanvasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(basicOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(444, Short.MAX_VALUE))
        );
        sceneObjectCanvasLayout.setVerticalGroup(
            sceneObjectCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sceneObjectCanvasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(basicOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(294, Short.MAX_VALUE))
        );

        objectEditorTabs.addTab("Basics", sceneObjectCanvas);

        javax.swing.GroupLayout flowCanvasLayout = new javax.swing.GroupLayout(flowCanvas);
        flowCanvas.setLayout(flowCanvasLayout);
        flowCanvasLayout.setHorizontalGroup(
            flowCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 745, Short.MAX_VALUE)
        );
        flowCanvasLayout.setVerticalGroup(
            flowCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 438, Short.MAX_VALUE)
        );

        objectEditorTabs.addTab("Logic", flowCanvas);

        animationChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animationChooserActionPerformed(evt);
            }
        });

        newAnimationButton.setText("New");
        newAnimationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAnimationButtonActionPerformed(evt);
            }
        });

        deleteAnimationButton.setText("Delete");
        deleteAnimationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAnimationButtonActionPerformed(evt);
            }
        });

        renameAnimationButton.setText("Rename...");
        renameAnimationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameAnimationButtonActionPerformed(evt);
            }
        });

        animationSpeedButton.setText("Speed...");
        animationSpeedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animationSpeedButtonActionPerformed(evt);
            }
        });

        animationSpriteButton.setText("Spritesheet...");
        animationSpriteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animationSpriteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(animationChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newAnimationButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteAnimationButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(renameAnimationButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(animationSpriteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(animationSpeedButton)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(animationChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newAnimationButton)
                    .addComponent(deleteAnimationButton)
                    .addComponent(renameAnimationButton)
                    .addComponent(animationSpeedButton)
                    .addComponent(animationSpriteButton))
                .addGap(5, 5, 5))
        );

        addFrameButton.setText("+");
        addFrameButton.setActionCommand("1");
        addFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFrameButtonActionPerformed(evt);
            }
        });

        removeFrameButton.setText("-");
        removeFrameButton.setActionCommand("-1");
        removeFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFrameButtonActionPerformed(evt);
            }
        });

        playAnimationButton.setText("►");
        playAnimationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playAnimationButtonActionPerformed(evt);
            }
        });

        frameCountLabel.setText("Frame count: 1");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addFrameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeFrameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frameCountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(playAnimationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addFrameButton)
                    .addComponent(removeFrameButton)
                    .addComponent(playAnimationButton)
                    .addComponent(frameCountLabel))
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout animationCanvasLayout = new javax.swing.GroupLayout(animationCanvas);
        animationCanvas.setLayout(animationCanvasLayout);
        animationCanvasLayout.setHorizontalGroup(
            animationCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        animationCanvasLayout.setVerticalGroup(
            animationCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(animationCanvasLayout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 372, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        objectEditorTabs.addTab("Animations", animationCanvas);

        galleryObjectPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        galleryObjectChooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Player" }));
        galleryObjectChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                galleryObjectChooserActionPerformed(evt);
            }
        });

        newGalleryObjectButton.setText("New object...");
        newGalleryObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGalleryObjectButtonActionPerformed(evt);
            }
        });

        deleteGalleryObjectButton.setText("Delete object");
        deleteGalleryObjectButton.setEnabled(false);
        deleteGalleryObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGalleryObjectButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Gallery object:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Object Gallery");

        javax.swing.GroupLayout galleryObjectPanelLayout = new javax.swing.GroupLayout(galleryObjectPanel);
        galleryObjectPanel.setLayout(galleryObjectPanelLayout);
        galleryObjectPanelLayout.setHorizontalGroup(
            galleryObjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(galleryObjectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(galleryObjectChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newGalleryObjectButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteGalleryObjectButton)
                .addContainerGap())
        );
        galleryObjectPanelLayout.setVerticalGroup(
            galleryObjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(galleryObjectPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(galleryObjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(galleryObjectChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newGalleryObjectButton)
                    .addComponent(deleteGalleryObjectButton)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(3, 3, 3))
        );

        javax.swing.GroupLayout objectEditorLayout = new javax.swing.GroupLayout(objectEditor.getContentPane());
        objectEditor.getContentPane().setLayout(objectEditorLayout);
        objectEditorLayout.setHorizontalGroup(
            objectEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(objectEditorTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addComponent(galleryObjectPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        objectEditorLayout.setVerticalGroup(
            objectEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, objectEditorLayout.createSequentialGroup()
                .addComponent(galleryObjectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(objectEditorTabs))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("PlatformR Engine");
        setBackground(new java.awt.Color(1, 1, 1));
        setBounds(new java.awt.Rectangle(150, 150, 1000, 600));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(700, 330));
        setModalExclusionType(null);
        setName("windowFrame"); // NOI18N
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        sceneCanvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sceneCanvasMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                sceneCanvasMouseMoved(evt);
            }
        });
        sceneCanvas.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                sceneCanvasMouseWheelMoved(evt);
            }
        });
        sceneCanvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sceneCanvasMouseClicked(evt);
            }
        });
        sceneCanvas.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sceneCanvasPropertyChange(evt);
                sceneCanvasPropertyChange1(evt);
            }
        });
        sceneCanvas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sceneCanvasKeyPressed(evt);
            }
        });

        jPanel13.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        playButton.setMnemonic('R');
        playButton.setText("►");
        playButton.setDoubleBuffered(true);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        startAtCurrentLevelCheckBox.setText("Start at current level");
        startAtCurrentLevelCheckBox.setDoubleBuffered(true);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startAtCurrentLevelCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(startAtCurrentLevelCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        topPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        bringForwardButton.setText("↑");
        bringForwardButton.setToolTipText("Send forward");
        bringForwardButton.setActionCommand("f");
        bringForwardButton.setEnabled(false);
        bringForwardButton.setMaximumSize(new java.awt.Dimension(85, 23));
        bringForwardButton.setMinimumSize(new java.awt.Dimension(85, 23));
        bringForwardButton.setPreferredSize(new java.awt.Dimension(85, 23));
        bringForwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveZAction(evt);
            }
        });

        sendBackwardsButton.setText("↓");
        sendBackwardsButton.setToolTipText("Send backwards");
        sendBackwardsButton.setActionCommand("b");
        sendBackwardsButton.setEnabled(false);
        sendBackwardsButton.setMaximumSize(new java.awt.Dimension(85, 23));
        sendBackwardsButton.setPreferredSize(new java.awt.Dimension(85, 23));
        sendBackwardsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveZAction(evt);
            }
        });

        cloneObjectButton.setText("Clone");
        cloneObjectButton.setActionCommand("c");
        cloneObjectButton.setEnabled(false);
        cloneObjectButton.setPreferredSize(new java.awt.Dimension(85, 23));
        cloneObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spawnObjectAction(evt);
            }
        });

        editObjectButton.setText("Edit");
        editObjectButton.setEnabled(false);
        editObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editObjectButtonActionPerformed(evt);
            }
        });

        objectLayerChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"Distance", "Background", "Normal", "Foreground"}));
        objectLayerChooser.setToolTipText("Choose the layer the object lies in");
        objectLayerChooser.setEnabled(false);
        objectLayerChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectLayerChooserActionPerformed(evt);
            }
        });
        objectLayerChooser.setSelectedIndex(-1);

        newObjectButton.setMnemonic('N');
        newObjectButton.setText("New...");
        newObjectButton.setActionCommand("n");
        newObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spawnObjectAction(evt);
            }
        });

        jLabel1.setText("Layer:");

        deleteObjectButton.setText("Delete");
        deleteObjectButton.setEnabled(false);
        deleteObjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteObjectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newObjectButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editObjectButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cloneObjectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteObjectButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(objectLayerChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bringForwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendBackwardsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cloneObjectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newObjectButton)
                    .addComponent(editObjectButton)
                    .addComponent(bringForwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendBackwardsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(objectLayerChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(deleteObjectButton))
                .addGap(3, 3, 3))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jCheckBox1.setText("Show grid");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Canvas settings");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 22, Short.MAX_VALUE))
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout sceneCanvasLayout = new javax.swing.GroupLayout(sceneCanvas);
        sceneCanvas.setLayout(sceneCanvasLayout);
        sceneCanvasLayout.setHorizontalGroup(
            sceneCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sceneCanvasLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(sceneCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        sceneCanvasLayout.setVerticalGroup(
            sceneCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sceneCanvasLayout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 409, Short.MAX_VALUE)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        projectMenu.setText("Project");
        projectMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectMenuActionPerformed(evt);
            }
        });

        newProjectButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        newProjectButton.setText("New");
        newProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectButtonActionPerformed(evt);
            }
        });
        projectMenu.add(newProjectButton);

        openProjectButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openProjectButton.setText("Open...");
        openProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openProjectButtonActionPerformed(evt);
            }
        });
        projectMenu.add(openProjectButton);

        saveProjectButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveProjectButton.setText("Save...");
        saveProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectButtonActionPerformed(evt);
            }
        });
        projectMenu.add(saveProjectButton);
        projectMenu.add(jSeparator1);

        newLevelButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        newLevelButton.setText("New level");
        newLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newLevelButtonActionPerformed(evt);
            }
        });
        projectMenu.add(newLevelButton);

        levelManagerButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        levelManagerButton.setText("Open level manager...");
        levelManagerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                levelManagerButtonActionPerformed(evt);
            }
        });
        projectMenu.add(levelManagerButton);
        projectMenu.add(jSeparator5);

        objectGalleryButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        objectGalleryButton.setText("Open object gallery...");
        objectGalleryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectGalleryButtonActionPerformed(evt);
            }
        });
        projectMenu.add(objectGalleryButton);
        projectMenu.add(jSeparator6);

        reloadAssetsButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        reloadAssetsButton.setText("Reload project assets");
        reloadAssetsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadAssetsButtonActionPerformed(evt);
            }
        });
        projectMenu.add(reloadAssetsButton);

        openAssetsFolderButton.setText("Open assets folder");
        openAssetsFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openAssetsFolderButtonActionPerformed(evt);
            }
        });
        projectMenu.add(openAssetsFolderButton);
        projectMenu.add(jSeparator4);

        viewRootButton.setText("View root directory...");
        viewRootButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRootButtonActionPerformed(evt);
            }
        });
        projectMenu.add(viewRootButton);

        menuBar.add(projectMenu);

        levelMenu.setText("Level");

        spawnMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        spawnMenuItem.setText("Spawn point...");
        spawnMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spawnMenuItemActionPerformed(evt);
            }
        });
        levelMenu.add(spawnMenuItem);

        cameraLocationMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        cameraLocationMenuItem.setText("Camera location...");
        cameraLocationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cameraLocationMenuItemActionPerformed(evt);
            }
        });
        levelMenu.add(cameraLocationMenuItem);

        jMenuItem1.setText("Camera zoom...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        levelMenu.add(jMenuItem1);

        levelBoundsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        levelBoundsMenuItem.setText("Bounds...");
        levelBoundsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                levelBoundsMenuItemActionPerformed(evt);
            }
        });
        levelMenu.add(levelBoundsMenuItem);

        jMenu2.setText("Lighting");

        topColorMenuItem.setText("Background color (top)...");
        topColorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topColorMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(topColorMenuItem);

        bottomColorMenuItem.setText("Background color (bottom)...");
        bottomColorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomColorMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(bottomColorMenuItem);

        lightingColorMenuItem.setText("Ambience color...");
        lightingColorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lightingColorMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(lightingColorMenuItem);

        jMenuItem3.setText("Ambience intensity...");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        levelMenu.add(jMenu2);

        jMenu1.setText("Audio");

        jMenuItem8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuItem8.setText("Music");
        jMenuItem8.setEnabled(false);
        jMenu1.add(jMenuItem8);

        selectBGMusic.setText("Select track...");
        selectBGMusic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBGMusicActionPerformed(evt);
            }
        });
        jMenu1.add(selectBGMusic);

        loopBGMusicMenuItem.setSelected(true);
        loopBGMusicMenuItem.setText("Loop");
        loopBGMusicMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopBGMusicMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(loopBGMusicMenuItem);

        autoplayBGMusicMenuItem.setSelected(true);
        autoplayBGMusicMenuItem.setText("Autoplay");
        autoplayBGMusicMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoplayBGMusicMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(autoplayBGMusicMenuItem);

        musicVolumeMenuItem.setText("Volume...");
        musicVolumeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicVolumeMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(musicVolumeMenuItem);

        jMenuItem9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuItem9.setText("Ambient sounds");
        jMenuItem9.setEnabled(false);
        jMenu1.add(jMenuItem9);

        selectAmbienceMenuItem.setText("Select track...");
        selectAmbienceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAmbienceMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(selectAmbienceMenuItem);

        loopAmbientSoundMenuItem.setSelected(true);
        loopAmbientSoundMenuItem.setText("Loop");
        loopAmbientSoundMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopAmbientSoundMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(loopAmbientSoundMenuItem);

        autoplayAmbientSoundMenuItem.setSelected(true);
        autoplayAmbientSoundMenuItem.setText("Autoplay");
        autoplayAmbientSoundMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoplayAmbientSoundMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(autoplayAmbientSoundMenuItem);

        ambientSoundVolumeMenuItem.setText("Volume...");
        ambientSoundVolumeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambientSoundVolumeMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(ambientSoundVolumeMenuItem);

        levelMenu.add(jMenu1);

        menuBar.add(levelMenu);

        statusIndicator.setEnabled(false);
        statusIndicator.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        menuBar.add(statusIndicator);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sceneCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sceneCanvas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sceneCanvasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sceneCanvasMouseReleased

    }//GEN-LAST:event_sceneCanvasMouseReleased

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus

    }//GEN-LAST:event_formWindowGainedFocus


    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (promptSave() == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void saveProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectButtonActionPerformed
        while (true) {
            String input = JOptionPane.showInputDialog(this, "Project name:", Project.getProject().getName());
            if (input == null) {
                break;
            }
            input = input.replaceAll("[\\/.,]", "");
            if (Project.projectExists(input)) {
                int overwrite = JOptionPane.showConfirmDialog(this, "A project by that name already exists! Overwrite?",
                        "Careful!",
                        JOptionPane.YES_NO_CANCEL_OPTION);
                if (overwrite == JOptionPane.YES_OPTION) {
                    Project.getProject().setName(input);
                    Project.getProject().save();
                    break;
                }
            } else {
                Project.getProject().setName(input);
                Project.getProject().save();
                break;
            }
        }
        GUI.updateWindowTitle();
        sceneCanvas.repaint();
        GUI.refreshObjectProperties();
        objectEditor.setVisible(false);
    }//GEN-LAST:event_saveProjectButtonActionPerformed

    private void newProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectButtonActionPerformed
        if (promptSave() == 0) {
            while (true) {
                String input = JOptionPane.showInputDialog(this, "Project name:", "New project...", JOptionPane.PLAIN_MESSAGE);
                if (input == null) break;
                input = input.replaceAll("[\\/.,]", "");
                if (Project.projectExists(input)) {
                    JOptionPane.showMessageDialog(this, "Project \"" + input + "\" already exists!",
                            "Whoops!", JOptionPane.ERROR_MESSAGE);
                } else {
                    Project.newProject(input, true, true);
                    break;
                }
            }
            GUI.updateWindowTitle();
            sceneCanvas.resetCamera();
            sceneCanvas.setSelectedObject(null);
            sceneCanvas.repaint();
            GUI.refreshObjectProperties();
            objectEditor.setVisible(false);
        }
    }//GEN-LAST:event_newProjectButtonActionPerformed

    private void newLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newLevelButtonActionPerformed
        Level l = new Level();
        l.setName("new_level" + (Math.abs(new Random().nextInt())));
        Project.getProject().addLevel(l);
        Project.getProject().switchToLevel(l.getName());
        sceneCanvas.resetCamera();
        sceneCanvas.setSelectedObject(null);
        sceneCanvas.repaint();
        GUI.updateWindowTitle();
        GUI.refreshObjectProperties();
        GUI.refreshLevelMenu();
    }//GEN-LAST:event_newLevelButtonActionPerformed

    private void levelListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_levelListValueChanged
        String selected = ((String) levelList.getSelectedValue());
        System.out.println(selected);
        if (selected != null) {
            levelNameField.setText(selected);
        }
        levelNameField.setEnabled(selected != null);
        editLevelButton.setEnabled(selected != null);
        deleteLevelButton.setEnabled(selected != null);
        renameLevelButton.setEnabled(selected != null);
    }//GEN-LAST:event_levelListValueChanged

    private void deleteLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLevelButtonActionPerformed
        String selected = ((String) levelList.getSelectedValue());
        int index = levelList.getSelectedIndex();
        if (selected.equals(Project.getProject().getCurrentLevel().getName())) {
            //JOptionPane.showMessageDialog(levelManagerDialog, "This level is being edited and cannot be deleted.");
            JOptionPane.showMessageDialog(levelManagerDialog, "This level is being edited and cannot be deleted.");
            return;
        }
        Project.getProject().deleteLevel(selected);
        GUI.refreshList(levelList, Project.getProject().getLevels());
        levelList.setSelectedIndex(index);
        if (levelList.getSelectedIndex() > levelList.getMaxSelectionIndex()) {
            levelList.setSelectedIndex(levelList.getMaxSelectionIndex());
        } else if (levelList.getSelectedIndex() < levelList.getMinSelectionIndex()) {
            levelList.setSelectedIndex(0);
        }
    }//GEN-LAST:event_deleteLevelButtonActionPerformed

    private void editLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLevelButtonActionPerformed
        String selected = ((String) levelList.getSelectedValue());
        if (selected.equals(Project.getProject().getCurrentLevel().getName())) {
            //GUI.showMessage("You are already editing this level!", levelManagerDialog);
            JOptionPane.showMessageDialog(levelManagerDialog, "You are already editing this level!");
            return;
        }
        Project.getProject().switchToLevel(selected);
        GUI.updateWindowTitle();
        GUI.refreshObjectProperties();
        GUI.refreshLevelMenu();
        sceneCanvas.resetCamera();
        sceneCanvas.setSelectedObject(null);
        sceneCanvas.repaint();
        hideDialog(levelManagerDialog);
        GUI.updateWindowTitle();
    }//GEN-LAST:event_editLevelButtonActionPerformed

    private void levelManagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_levelManagerButtonActionPerformed
        GUI.refreshList(levelList, Project.getProject().getLevels());
        showDialog(levelManagerDialog);
    }//GEN-LAST:event_levelManagerButtonActionPerformed

    private void renameLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameLevelButtonActionPerformed
        int index = levelList.getSelectedIndex();
        ArrayList<Level> list = Project.getProject().getLevels();
        Level l = list.get(index);

        if (l.getName().equals(levelNameField.getText()) == false) {
            if (Project.getProject().containsLevel(levelNameField.getText())) {
                JOptionPane.showMessageDialog(levelManagerDialog, "A level already exists by that name!");
                return;
            }
            l.setName(levelNameField.getText());
            GUI.refreshList(levelList, Project.getProject().getLevels());
            levelList.setSelectedIndex(index);
            levelNameField.grabFocus();
            GUI.updateWindowTitle();
        }

    }//GEN-LAST:event_renameLevelButtonActionPerformed

    private void viewRootButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRootButtonActionPerformed
        File folder = new File(Project.getProject().getDirectory());
        try {
            if (folder.exists()) {
                Desktop.getDesktop().open(folder);
            } else {
                JOptionPane.showMessageDialog(this, "Project files have not been created!\nSave your project first.");
            }
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewRootButtonActionPerformed

    private void reloadAssetsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadAssetsButtonActionPerformed
        if (Project.getProject().existsOnDisk()) {
            Assets.load();
            JOptionPane.showMessageDialog(null, "Successfully loaded "+Assets.assetCount()+" project assets!");
        } else {
            JOptionPane.showMessageDialog(this, "Project files have not been created!\nSave your project first.");
        }

    }//GEN-LAST:event_reloadAssetsButtonActionPerformed

    private void openAssetsFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openAssetsFolderButtonActionPerformed
        File folder = new File(System.getProperty("user.home") + "/platformr/projects/" + Project.getProject().getName() + "/assets/");
        try {
            if (folder.exists()) {
                Desktop.getDesktop().open(folder);
            } else {
                JOptionPane.showMessageDialog(this, "Project files have not been created!\nSave your project first.");
            }
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openAssetsFolderButtonActionPerformed

    private void genericDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_genericDialogWindowClosing
        if (!(evt.getComponent() instanceof JDialog)) {
            return;
        }
        hideDialog((JDialog) evt.getComponent());
    }//GEN-LAST:event_genericDialogWindowClosing

    private void levelManagerDialogWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_levelManagerDialogWindowOpened
        GUI.refreshList(levelList, Project.getProject().getLevels());
    }//GEN-LAST:event_levelManagerDialogWindowOpened

    private void projectMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectMenuActionPerformed

    }//GEN-LAST:event_projectMenuActionPerformed

    private void objectCollidesCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectCollidesCheckboxActionPerformed
        sceneCanvas.getActiveObject().setCollides(!sceneCanvas.getActiveObject().collides());
        GUI.refreshBasicObjectOptions();
    }//GEN-LAST:event_objectCollidesCheckboxActionPerformed

    private void objectGravityCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectGravityCheckboxActionPerformed
        sceneCanvas.getActiveObject().setGravity(!sceneCanvas.getActiveObject().gravity());
        GUI.refreshBasicObjectOptions();
    }//GEN-LAST:event_objectGravityCheckboxActionPerformed

    private void objectGalleryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectGalleryButtonActionPerformed
        sceneCanvas.setActiveObject(Project.getProject().getGalleryObject(0));
        showObjectEditor();
    }//GEN-LAST:event_objectGalleryButtonActionPerformed

    private void openProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openProjectButtonActionPerformed
        if (promptSave() == 0) {
            ArrayList<String> spawnList = new ArrayList<String>();
            for (File f : new File(Assets.USER_HOME + "/platformr/projects").listFiles()) {
                if (new File(f.getAbsolutePath() + "/project.txt").exists()) {
                    spawnList.add(f.getName());
                }
            }
            Object selection = JOptionPane.showInputDialog(this, "Choose a project:", "Open project...",
                    JOptionPane.PLAIN_MESSAGE, null, spawnList.toArray(), null);
            if (selection == null) {
                return;
            }
            Project.newProject((String) selection, false, false);
            Project.getProject().load();
        }
        GUI.updateWindowTitle();
        sceneCanvas.setSelectedObject(null);
        sceneCanvas.repaint();
        GUI.refreshObjectProperties();
        hideObjectEditor();
    }//GEN-LAST:event_openProjectButtonActionPerformed

    private void sceneCanvasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sceneCanvasKeyPressed
        sceneCanvas.handleKeyPress(evt);
    }//GEN-LAST:event_sceneCanvasKeyPressed

    private void sceneCanvasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sceneCanvasMouseClicked
        sceneCanvas.handleMouseClick(evt);
    }//GEN-LAST:event_sceneCanvasMouseClicked

    private void sceneCanvasMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_sceneCanvasMouseWheelMoved
        sceneCanvas.handleMouseWheel(evt);
    }//GEN-LAST:event_sceneCanvasMouseWheelMoved

    private void sceneCanvasMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sceneCanvasMouseMoved
        sceneCanvas.handleMouseMovement(evt);
    }//GEN-LAST:event_sceneCanvasMouseMoved

    private void sceneCanvasMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sceneCanvasMouseDragged
        sceneCanvas.handleMouseDrag(evt);
    }//GEN-LAST:event_sceneCanvasMouseDragged

    private void objectLayerChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectLayerChooserActionPerformed
        if (sceneCanvas.getSelectedObject() == null) return;
        Project.getProject().getCurrentLevel().moveToLayer(1 + objectLayerChooser.getSelectedIndex(), sceneCanvas.getSelectedObject());
        sceneCanvas.repaint();
    }//GEN-LAST:event_objectLayerChooserActionPerformed

    private void editObjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editObjectButtonActionPerformed
        sceneCanvas.setActiveObject(sceneCanvas.getSelectedObject());
        GUI.refreshObjectEditor();
        showObjectEditor();
    }//GEN-LAST:event_editObjectButtonActionPerformed

    private void spawnObjectAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spawnObjectAction
        String cmd = evt.getActionCommand();
        char c = cmd.charAt(0);
        SceneObject o = new SceneObject(), src = null;
        if (c == 'c') {
            src = sceneCanvas.getSelectedObject();
        } else if (c == 'n') {
            ArrayList<String> spawnList = new ArrayList<String>();
            spawnList.add("Empty hitbox");
            for (SceneObject s : Project.getProject().getGalleryObjects()) {
                spawnList.add(s.toString());
            }
            spawnList.remove(1); //remove PLAYER gallery object
            Object selection = JOptionPane.showInputDialog(this, "Choose a gallery object to spawn:", "Spawn new object...",
                    JOptionPane.PLAIN_MESSAGE, null, spawnList.toArray(), null);
            if (selection == null) {
                return;
            }
            if ("Empty hitbox".equals(selection)) {
                o.setHitbox(true);
                o.setName("object" + Math.abs(new Random().nextInt()));
            } else {
                src = Project.getProject().getGalleryObject((String) selection);
            }
        }

        if (src != null) {
            src.copyTo(o);
            o.setName(src + "_copy");
        }

        o.setWorldX((int) sceneCanvas.getCameraX());
        o.setWorldY((int) sceneCanvas.getCameraY());
        Project.getProject().getCurrentLevel().add(o);

        sceneCanvas.repaint();
        System.out.println("Added new object: " + o.getName());
    }//GEN-LAST:event_spawnObjectAction

    private void moveZAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveZAction
        char c = evt.getActionCommand().charAt(0);
        if (sceneCanvas.getSelectedObject() != null) {
            if (c == 'f') {
                Project.getProject().getCurrentLevel().moveForward(sceneCanvas.getSelectedObject());
            }
            if (c == 'b') {
                Project.getProject().getCurrentLevel().moveBackward(sceneCanvas.getSelectedObject());
            }
            sceneCanvas.repaint();
        }
    }//GEN-LAST:event_moveZAction

    private void topColorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topColorMenuItemActionPerformed
        Color c = JColorChooser.showDialog(this, "Choose the top background color...", Project.getProject().getCurrentLevel().getTopBGColor());
        if (c != null) {
            Project.getProject().getCurrentLevel().setTopBGColor(c);
        }
    }//GEN-LAST:event_topColorMenuItemActionPerformed

    private void bottomColorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomColorMenuItemActionPerformed
        Color c = JColorChooser.showDialog(this, "Choose the bottom background color...", Project.getProject().getCurrentLevel().getBottomBGColor());
        if (c != null) {
            Project.getProject().getCurrentLevel().setBottomBGColor(c);
        }
    }//GEN-LAST:event_bottomColorMenuItemActionPerformed

    private void lightingColorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lightingColorMenuItemActionPerformed
        Color c = JColorChooser.showDialog(this, "Choose the lighting color...", Project.getProject().getCurrentLevel().getLightingColor());
        if (c != null) {
            Project.getProject().getCurrentLevel().setLightingColor(c);
        }
    }//GEN-LAST:event_lightingColorMenuItemActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        String input = JOptionPane.showInputDialog(this, "Ambient light intensity:", "Set lighting intensity...", JOptionPane.PLAIN_MESSAGE);
        int[] parsed = MiscMath.toIntArray(input);
        if (parsed.length > 0) {
            double percent = (double) parsed[0] / 100d;
            Project.getProject().getCurrentLevel().setLightingIntensity(percent);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void spawnMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spawnMenuItemActionPerformed
        String input = JOptionPane.showInputDialog(this, "Coordinates:", "Set player spawn...", JOptionPane.PLAIN_MESSAGE);
        int[] parsed = MiscMath.toIntArray(input);
        if (parsed.length >= 2) {
            Project.getProject().getCurrentLevel().setPlayerSpawn(parsed[0], parsed[1]);
        }
    }//GEN-LAST:event_spawnMenuItemActionPerformed

    private void cameraLocationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cameraLocationMenuItemActionPerformed
        String input = JOptionPane.showInputDialog(this, "Coordinates:", "Set camera location...", JOptionPane.PLAIN_MESSAGE);
        int[] parsed = MiscMath.toIntArray(input);
        if (parsed.length >= 2) {
            Project.getProject().getCurrentLevel().setCameraSpawn(parsed[0], parsed[1]);
        }
    }//GEN-LAST:event_cameraLocationMenuItemActionPerformed

    private void selectBGMusicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBGMusicActionPerformed
        String input = JOptionPane.showInputDialog(this, "Set background music...",
                Project.getProject().getCurrentLevel().getBGMusic());
        if (input != null) {
            Project.getProject().getCurrentLevel().setBGMusic(input);
        }
    }//GEN-LAST:event_selectBGMusicActionPerformed

    private void selectAmbienceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAmbienceMenuItemActionPerformed
        String input = JOptionPane.showInputDialog(this, "Set ambient sound...",
                Project.getProject().getCurrentLevel().getAmbientSound());
        if (input != null) {
            Project.getProject().getCurrentLevel().setAmbientSound(input);
        }
    }//GEN-LAST:event_selectAmbienceMenuItemActionPerformed

    private void loopBGMusicMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopBGMusicMenuItemActionPerformed
        Project.getProject().getCurrentLevel().loopBGMusic(loopBGMusicMenuItem.isSelected());
    }//GEN-LAST:event_loopBGMusicMenuItemActionPerformed

    private void autoplayBGMusicMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoplayBGMusicMenuItemActionPerformed
        Project.getProject().getCurrentLevel().autoPlayBGMusic(autoplayBGMusicMenuItem.isSelected());
    }//GEN-LAST:event_autoplayBGMusicMenuItemActionPerformed

    private void loopAmbientSoundMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopAmbientSoundMenuItemActionPerformed
        Project.getProject().getCurrentLevel().loopBGAmbience(loopAmbientSoundMenuItem.isSelected());
    }//GEN-LAST:event_loopAmbientSoundMenuItemActionPerformed

    private void autoplayAmbientSoundMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoplayAmbientSoundMenuItemActionPerformed
        Project.getProject().getCurrentLevel().autoPlayBGAmbience(autoplayAmbientSoundMenuItem.isSelected());
    }//GEN-LAST:event_autoplayAmbientSoundMenuItemActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        runProject(startAtCurrentLevelCheckBox.isSelected()
                ? Project.getProject().getCurrentLevel().getName() : null);
    }//GEN-LAST:event_playButtonActionPerformed

    private void levelBoundsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_levelBoundsMenuItemActionPerformed
        String input = JOptionPane.showInputDialog(this, "Bounds:", "Set level bounds...", JOptionPane.PLAIN_MESSAGE);
        int[] parsed = MiscMath.toIntArray(input);
        if (parsed.length >= 4) {
            Project.getProject().getCurrentLevel()
                    .setBounds(parsed[0], parsed[1], parsed[2], parsed[3]);
        }
    }//GEN-LAST:event_levelBoundsMenuItemActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        sceneCanvas.setShowGrid(jCheckBox1.isSelected());
        sceneCanvas.repaint();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void deleteObjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteObjectButtonActionPerformed
        Project.getProject().getCurrentLevel().removeObject(sceneCanvas.getSelectedObject());
        sceneCanvas.repaint();
    }//GEN-LAST:event_deleteObjectButtonActionPerformed

    private void changeObjectProperty(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeObjectProperty
        char cmd = evt.getActionCommand().charAt(0);
        String input = JOptionPane.showInputDialog(objectEditor,
                cmd == 'c' ? "Type: " : (cmd == 'n' ? "Name:" : "Texture:"),
                sceneCanvas.getActiveObject().getTexture());
        if (input == null) {
            return;
        }
        boolean gallery = Project.getProject().containsGalleryObject(input);
        boolean level = Project.getProject().getCurrentLevel().containsObject(input);
        if ((cmd == 'c' && gallery) || (cmd == 'n' && level)) {
            JOptionPane.showMessageDialog(objectEditor, "This name is already taken!",
                    "Whoops!", JOptionPane.PLAIN_MESSAGE, null);
            return;
        }
        if (cmd == 'c') {
            sceneCanvas.getActiveObject().setType(input);
        }
        if (cmd == 'n') {
            sceneCanvas.getActiveObject().setName(input);
        }
        if (cmd == 't') {
            sceneCanvas.getActiveObject().setTexture(input);
        }
        GUI.refreshBasicObjectOptions();
    }//GEN-LAST:event_changeObjectProperty

    private void newAnimationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAnimationButtonActionPerformed
        sceneCanvas.getActiveObject().newAnimation();
        GUI.refreshChooser(animationChooser, sceneCanvas.getActiveObject().getAnimations());
        animationChooser.setSelectedIndex(sceneCanvas.getActiveObject().getAnimations().size() - 1);
    }//GEN-LAST:event_newAnimationButtonActionPerformed

    private void deleteAnimationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAnimationButtonActionPerformed
        sceneCanvas.getActiveObject().getAnimations().remove(animationChooser.getSelectedIndex());
        GUI.refreshChooser(animationChooser, sceneCanvas.getActiveObject().getAnimations());
    }//GEN-LAST:event_deleteAnimationButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String input = JOptionPane.showInputDialog(this, "Camera zoom (1x - 8x):", Project.getProject().getCurrentLevel().getZoom());
        int[] parsed = MiscMath.toIntArray(input);
        if (parsed.length >= 1) {
            Project.getProject().getCurrentLevel().setZoom(parsed[0]);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void musicVolumeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicVolumeMenuItemActionPerformed
        String input = JOptionPane.showInputDialog(this, "Volume (%):",
                (int) (Project.getProject().getCurrentLevel().getBGMusicVolume() * 100));
        int[] parsed = MiscMath.toIntArray(input);
        if (parsed.length >= 1) {
            Project.getProject().getCurrentLevel().setBGMusicVolume(parsed[0] / 100f);
        }
    }//GEN-LAST:event_musicVolumeMenuItemActionPerformed

    private void ambientSoundVolumeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambientSoundVolumeMenuItemActionPerformed
        String input = JOptionPane.showInputDialog(this, "Volume (%):",
                (int) (Project.getProject().getCurrentLevel().getBGMusicVolume() * 100));
        int[] parsed = MiscMath.toIntArray(input);
        if (parsed.length >= 1) {
            Project.getProject().getCurrentLevel().setBGAmbienceVolume(parsed[0] / 100f);
        }
    }//GEN-LAST:event_ambientSoundVolumeMenuItemActionPerformed

    private void objectEditorWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_objectEditorWindowClosing
        hideObjectEditor();
        //TODO: remember to apply changes if the active object is a gallery object
    }//GEN-LAST:event_objectEditorWindowClosing

    private void sceneCanvasPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sceneCanvasPropertyChange
        editObjectButton.setEnabled(sceneCanvas.getSelectedObject() != null);
    }//GEN-LAST:event_sceneCanvasPropertyChange

    private void galleryObjectChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_galleryObjectChooserActionPerformed
        int index = galleryObjectChooser.getSelectedIndex();
        deleteGalleryObjectButton.setEnabled(index > 0);
        if (index < 0) return;
        sceneCanvas.setActiveObject(
                Project.getProject().getGalleryObject(index));
        refreshObjectEditor();
        objectEditorTabs.setSelectedIndex(0);
    }//GEN-LAST:event_galleryObjectChooserActionPerformed

    private void newGalleryObjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGalleryObjectButtonActionPerformed
        String input = JOptionPane.showInputDialog(objectEditor, "Name:", "New gallery object...", JOptionPane.PLAIN_MESSAGE);
        if (input == null) return;
        input = input.replaceAll("[\\/.,!@#$%^&*()_+]", "");
        SceneObject o = new SceneObject();
        o.setType(input);
        Project.getProject().addGalleryObject(o);
        GUI.refreshChooser(galleryObjectChooser, Project.getProject().getGalleryObjects());
        galleryObjectChooser.setSelectedIndex(Project.getProject().getGalleryObjects().size() - 1);
        sceneCanvas.setActiveObject(o);
        refreshObjectEditor();
    }//GEN-LAST:event_newGalleryObjectButtonActionPerformed

    private void deleteGalleryObjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGalleryObjectButtonActionPerformed
        Project.getProject().removeGalleryObject(galleryObjectChooser.getSelectedIndex());
        int o_index = galleryObjectChooser.getSelectedIndex();
        if (o_index == 0) return;
        GUI.refreshChooser(galleryObjectChooser, Project.getProject().getGalleryObjects());
        galleryObjectChooser.setSelectedIndex(o_index >= Project.getProject().getGalleryObjects().size() 
                ? Project.getProject().getGalleryObjects().size() - 1 : o_index);
        int index = galleryObjectChooser.getSelectedIndex();
        sceneCanvas.setActiveObject(Project.getProject().getGalleryObject(index));
        refreshObjectEditor();
    }//GEN-LAST:event_deleteGalleryObjectButtonActionPerformed

    private void sceneCanvasPropertyChange1(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sceneCanvasPropertyChange1
        editObjectButton.setEnabled(sceneCanvas.getSelectedObject() != null);
    }//GEN-LAST:event_sceneCanvasPropertyChange1

    private void renameAnimationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameAnimationButtonActionPerformed
        Animation a = sceneCanvas.getActiveObject().getAnimations().get(animationChooser.getSelectedIndex());
        String input = JOptionPane.showInputDialog(objectEditor, "Name:", a.getName());
        if (input == null) return;
        if (sceneCanvas.getActiveObject().containsAnimation(input)) {
            JOptionPane.showMessageDialog(objectEditor, "An animation already exists by that name!", "Whoops!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        a.setName(input);
        GUI.refreshChooser(animationChooser, sceneCanvas.getActiveObject().getAnimations());
    }//GEN-LAST:event_renameAnimationButtonActionPerformed

    private void animationSpriteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animationSpriteButtonActionPerformed
        Animation a = sceneCanvas.getActiveObject().getAnimations().get(animationChooser.getSelectedIndex());
        String input = JOptionPane.showInputDialog(objectEditor, "Spritesheet:", a.getSpriteSheet());
        if (input == null) return;
        a.setSpriteSheet(input);
        GUI.refreshAnimationOptions();
    }//GEN-LAST:event_animationSpriteButtonActionPerformed

    private void animationSpeedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animationSpeedButtonActionPerformed
        Animation a = sceneCanvas.getActiveObject().getAnimations().get(animationChooser.getSelectedIndex());
        String input = JOptionPane.showInputDialog(objectEditor, "Frame duration (ms):", a.getFrameDuration());
        if (input == null) return;
        a.setFrameDuration(Integer.parseInt(input));
        GUI.refreshAnimationOptions();
    }//GEN-LAST:event_animationSpeedButtonActionPerformed

    private void playAnimationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playAnimationButtonActionPerformed
        animationCanvas.reset();
        animationCanvas.setPaused(!playAnimationButton.isSelected());
        GUI.refreshAnimationOptions();
    }//GEN-LAST:event_playAnimationButtonActionPerformed

    private void animationChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animationChooserActionPerformed
        GUI.refreshAnimationOptions();
    }//GEN-LAST:event_animationChooserActionPerformed

    private void addFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFrameButtonActionPerformed
        Animation a = sceneCanvas.getActiveObject().getAnimations().get(animationChooser.getSelectedIndex());
        a.addFrameCount(Integer.parseInt(evt.getActionCommand()));
        GUI.refreshAnimationOptions();
    }//GEN-LAST:event_addFrameButtonActionPerformed

    /**
     * Returns 0 if user made a YES or NO choice. 1 if the user canceled.
     *
     * @return An int.
     */
    public int promptSave() {
        int dialogResult = JOptionPane.showConfirmDialog(this, "Would you like to save your progress?", "Hold on a second...",
                JOptionPane.YES_NO_CANCEL_OPTION);
        if (dialogResult == JOptionPane.CLOSED_OPTION) {
            dialogResult = JOptionPane.CANCEL_OPTION;
        }
        if (dialogResult == JOptionPane.YES_OPTION) {
            Project.getProject().save();
        }
        if (dialogResult != JOptionPane.CANCEL_OPTION) {
            return 0;
        } else {
            return 1;
        }
    }

    public static SceneCanvas getSceneCanvas() {
        return sceneCanvas;
    }

    public static AnimationCanvas getAnimationCanvas() {
        return animationCanvas;
    }

    public static void showDialog(JDialog d) {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        double width = screenSize.getWidth();
        double height = screenSize.getHeight();
        d.setLocation((int) (width / 2) - (d.getWidth() / 2),
                (int) (height / 2) - ((d.getHeight() / 2)));
        d.setModal(true);
        d.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        d.setVisible(true);
        System.out.println("Showing " + d.getTitle());
    }

    public void showObjectEditor() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        double width = screenSize.getWidth();
        double height = screenSize.getHeight();
        JFrame d = objectEditor;
        d.setSize(d.getPreferredSize());
        d.setLocation((int) (width / 2) - (d.getWidth() / 2),
                (int) (height / 2) - ((d.getHeight() / 2)));
        d.setVisible(true);
        this.setEnabled(false);
        if (Project.getProject().containsGalleryObject(sceneCanvas.getActiveObject())) 
            galleryObjectChooser.setSelectedIndex(0);
        objectEditorTabs.setSelectedIndex(0);
        System.out.println("Showing " + d.getTitle());
    }
    
    public void hideObjectEditor() {
        JFrame d = objectEditor;
        d.setVisible(false);
        this.setEnabled(true);
        this.setVisible(true);
        System.out.println("Hiding " + d.getTitle());
    }

    public static void hideDialog(JDialog d) {
        d.setVisible(false);
        d.setModal(false);
        System.out.println("Hiding " + d.getTitle());
    }

    /**
     * Clear and populate the JList with the contents of the ArrayList. Calls
     * adds toString() of each element to the JList.
     *
     * @param l The JList to refresh.
     * @param arr The list.
     */
    public static void refreshList(JList l, ArrayList arr) {
        int index = l.getSelectedIndex();
        String[] list = new String[arr.size()];
        for (int i = 0; i < arr.size(); i++) {
            list[i] = arr.get(i).toString();
        }
        l.setListData(list);
        if (index >= arr.size()) index = arr.size() - 1;
        if (index < 0) index = 0;
        if (index < 0 && arr.size() > 0) index = 0;
        l.setSelectedIndex(index);
    }
    
    public static void refreshChooser(JComboBox l, ArrayList arr) {
        int index = l.getSelectedIndex();
        l.removeAllItems();
        for (int i = 0; i < arr.size(); i++) l.addItem(arr.get(i).toString());
        if (index >= arr.size()) index = arr.size() - 1;
        if (index < 0 && arr.size() > 0) index = 0;
        l.setSelectedIndex(index);
    }

    public static void updateWindowTitle() {
        if (window == null) return;
        String title = "PlatformR Engine "+UpdateManager.VERSION_NAME+" - ";
        title += "/" + Project.getProject().getName();
        if (Project.getProject().getCurrentLevel() != null) {
            title += "/" + Project.getProject().getCurrentLevel().getName();
        }
        window.setTitle(title);
    }

    public static void refreshObjectEditor() {
        
        if (sceneCanvas.getActiveObject() == null) return;

        /**
         * GENERAL EDITOR STUFF
         */
        objectEditor.setTitle("Editing \"" + sceneCanvas.getActiveObject() + "\"");
        galleryObjectPanel.setVisible(Project.getProject().containsGalleryObject(sceneCanvas.getActiveObject()));
        deleteGalleryObjectButton.setEnabled(galleryObjectChooser.getSelectedIndex() > 0);
        
        /**
         * TABS
         */
        refreshBasicObjectOptions();
        GUI.refreshChooser(animationChooser, sceneCanvas.getActiveObject().getAnimations());
        //GUI.refreshChooser(flowChooser, sceneCanvas.getActiveObject().getFlows());
        
        objectEditorTabs.setEnabledAt(2, !sceneCanvas.getActiveObject().isHitbox()); //animation tab
        
    }
    
    public static void refreshBasicObjectOptions() {
        objectTypeField.setText(sceneCanvas.getActiveObject().getType());
        objectTextureField.setText(sceneCanvas.getActiveObject().getTexture());
        objectNameField.setText(sceneCanvas.getActiveObject().getName());
        objectGravityCheckbox.setSelected(sceneCanvas.getActiveObject().gravity());
        objectCollidesCheckbox.setSelected(sceneCanvas.getActiveObject().collides());
        changeObjectTypeButton.setEnabled(Project.getProject().containsGalleryObject(sceneCanvas.getActiveObject())
                && !"Player".equals(sceneCanvas.getActiveObject().getType()));
        changeObjectNameButton.setEnabled(!Project.getProject().containsGalleryObject(sceneCanvas.getActiveObject()));
        changeObjectTextureButton.setEnabled(!sceneCanvas.getActiveObject().isHitbox());
        sceneObjectCanvas.repaint();
    }
    
    public static void refreshAnimationOptions() {
        deleteAnimationButton.setEnabled(animationChooser.getSelectedIndex() > -1);
        renameAnimationButton.setEnabled(animationChooser.getSelectedIndex() > -1);
        animationSpriteButton.setEnabled(animationChooser.getSelectedIndex() > -1);
        animationSpeedButton.setEnabled(animationChooser.getSelectedIndex() > -1);
        addFrameButton.setEnabled(animationChooser.getSelectedIndex() > -1);
        playAnimationButton.setEnabled(animationChooser.getSelectedIndex() > -1);
        
        if (animationChooser.getSelectedIndex() < 0) {
            animationCanvas.clearAnimation();
            return;
        }
        Animation a = sceneCanvas.getActiveObject().getAnimations().get(animationChooser.getSelectedIndex());
        removeFrameButton.setEnabled(a.frameCount() > 0 && animationChooser.getSelectedIndex() > -1);
        frameCountLabel.setText("Frame count: "+a.frameCount());
        removeFrameButton.setEnabled(a.frameCount() > 1);
        animationCanvas.setAnimation(a);
        animationCanvas.reset();
        animationCanvas.repaint();
    }

    public static void refreshFlowOptions() {
        flowCanvas.repaint();
    }

    public static void refreshLevelMenu() {
        Level current = Project.getProject().getCurrentLevel();
        loopAmbientSoundMenuItem.setSelected(current.loopBGAmbience());
        loopBGMusicMenuItem.setSelected(current.loopBGMusic());
        autoplayAmbientSoundMenuItem.setSelected(current.autoPlayBGAmbience());
        autoplayBGMusicMenuItem.setSelected(current.autoPlayBGMusic());
        sceneCanvas.repaint();
    }

    public static void refreshObjectProperties() {
        objectLayerChooser.setEnabled(sceneCanvas.getSelectedObject() != null);
        objectLayerChooser.setSelectedIndex(sceneCanvas.getSelectedObject() != null
                ? sceneCanvas.getSelectedObject().getLayer() - 1 : -1);
        bringForwardButton.setEnabled(sceneCanvas.getSelectedObject() != null);
        sendBackwardsButton.setEnabled(sceneCanvas.getSelectedObject() != null);
        cloneObjectButton.setEnabled(sceneCanvas.getSelectedObject() != null);
        editObjectButton.setEnabled(sceneCanvas.getSelectedObject() != null);
        deleteObjectButton.setEnabled(sceneCanvas.getSelectedObject() != null);
    }

    public static void runProject(String level_name) {
        UpdateManager.checkForUpdates();
        UpdateManager.handleUpdates();

        try {
            //Scene.DOWNLOAD_THREAD.download("https://computerology.bitbucket.io/index.html", "C:/Users/Jeremy/Desktop/index.html");
            GUI.statusIndicator.setText("Starting game...");
            //start the runtime jar and pass in the project directory and the name of the level to start in
            //you will need to update this in the runtime jar when you reach that point

            String cmd = "java -jar \"" + Assets.USER_HOME + "/platformr/jars/runtime.jar\" \"" + Project.getProject().getDirectory() + "\""
                    + (level_name != null ? " \"" + level_name + "\"" : "");
            System.out.println(cmd);

            Process p = Runtime.getRuntime()
                    .exec(cmd);
            BufferedReader reader
                    = new BufferedReader(new InputStreamReader(p.getInputStream()));
            window.setVisible(false);
            //log the runtime's output
            System.out.println("---START OF GAME OUTPUT---");
            String results = "";
            String line = "";
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
                results += line + "\n";
            }
            System.out.println("---END OF GAME OUTPUT---");
            resultsTextBox.setText(results);
            showDialog(testOutputDialog);
            window.setVisible(true);
            GUI.statusIndicator.setText("");
        } catch (IOException ex) {
            //Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            // select Look and Feel
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                window = new GUI();
                window.setVisible(true);
                
                galleryObjectPanel.setVisible(false);

                Assets.mkdirs();
                Project.newProject("[new project]", true, true);
                Assets.load();
                UpdateManager.checkForUpdates();
                UpdateManager.handleUpdates();

                updateWindowTitle();
                sceneCanvas.repaint();

                JOptionPane.showMessageDialog(window, "Welcome, " + System.getProperty("user.name") + "!\n"
                        + "A blank project has been created for you. You can load previous\n"
                        + "projects using the Project menu.\n");

            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton addFrameButton;
    private javax.swing.JMenuItem ambientSoundVolumeMenuItem;
    private static gui.AnimationCanvas animationCanvas;
    private static javax.swing.JComboBox<String> animationChooser;
    private static javax.swing.JButton animationSpeedButton;
    private static javax.swing.JButton animationSpriteButton;
    private static javax.swing.JCheckBoxMenuItem autoplayAmbientSoundMenuItem;
    private static javax.swing.JCheckBoxMenuItem autoplayBGMusicMenuItem;
    private javax.swing.JPanel basicOptionsPanel;
    private javax.swing.JMenuItem bottomColorMenuItem;
    public static javax.swing.JButton bringForwardButton;
    private javax.swing.JMenuItem cameraLocationMenuItem;
    private static javax.swing.JButton changeObjectNameButton;
    private static javax.swing.JButton changeObjectTextureButton;
    private static javax.swing.JButton changeObjectTypeButton;
    public static javax.swing.JButton cloneObjectButton;
    private static javax.swing.JButton deleteAnimationButton;
    private static javax.swing.JButton deleteGalleryObjectButton;
    private javax.swing.JButton deleteLevelButton;
    private static javax.swing.JButton deleteObjectButton;
    private javax.swing.JButton editLevelButton;
    public static javax.swing.JButton editObjectButton;
    private static gui.FlowCanvas flowCanvas;
    private static javax.swing.JLabel frameCountLabel;
    private static javax.swing.JComboBox<String> galleryObjectChooser;
    private static javax.swing.JPanel galleryObjectPanel;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JMenuItem levelBoundsMenuItem;
    private static javax.swing.JList levelList;
    private javax.swing.JMenuItem levelManagerButton;
    public static javax.swing.JDialog levelManagerDialog;
    private javax.swing.JMenu levelMenu;
    private javax.swing.JTextField levelNameField;
    private javax.swing.JMenuItem lightingColorMenuItem;
    private static javax.swing.JCheckBoxMenuItem loopAmbientSoundMenuItem;
    private static javax.swing.JCheckBoxMenuItem loopBGMusicMenuItem;
    public static javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem musicVolumeMenuItem;
    private static javax.swing.JButton newAnimationButton;
    private static javax.swing.JButton newGalleryObjectButton;
    private javax.swing.JMenuItem newLevelButton;
    public static javax.swing.JButton newObjectButton;
    private javax.swing.JMenuItem newProjectButton;
    private static javax.swing.JCheckBox objectCollidesCheckbox;
    private static javax.swing.JFrame objectEditor;
    private static javax.swing.JTabbedPane objectEditorTabs;
    private javax.swing.JMenuItem objectGalleryButton;
    private static javax.swing.JCheckBox objectGravityCheckbox;
    public static javax.swing.JComboBox objectLayerChooser;
    private static javax.swing.JTextField objectNameField;
    private static javax.swing.JTextField objectTextureField;
    private static javax.swing.JTextField objectTypeField;
    private javax.swing.JMenuItem openAssetsFolderButton;
    private javax.swing.JMenuItem openProjectButton;
    private static javax.swing.JToggleButton playAnimationButton;
    public static javax.swing.JButton playButton;
    private javax.swing.JMenu projectMenu;
    private javax.swing.JMenuItem reloadAssetsButton;
    private static javax.swing.JButton removeFrameButton;
    private static javax.swing.JButton renameAnimationButton;
    private javax.swing.JButton renameLevelButton;
    private static javax.swing.JTextArea resultsTextBox;
    private javax.swing.JMenuItem saveProjectButton;
    public static gui.SceneCanvas sceneCanvas;
    private static gui.SceneObjectCanvas sceneObjectCanvas;
    private javax.swing.JMenuItem selectAmbienceMenuItem;
    private javax.swing.JMenuItem selectBGMusic;
    public static javax.swing.JButton sendBackwardsButton;
    private javax.swing.JMenuItem spawnMenuItem;
    public static javax.swing.JCheckBox startAtCurrentLevelCheckBox;
    public static javax.swing.JMenu statusIndicator;
    public static javax.swing.JDialog testOutputDialog;
    private javax.swing.JMenuItem topColorMenuItem;
    private javax.swing.JPanel topPanel;
    private javax.swing.JMenuItem viewRootButton;
    // End of variables declaration//GEN-END:variables
}
